<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>那年星空</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joewsearch.com/"/>
  <updated>2019-11-16T02:55:25.898Z</updated>
  <id>http://joewsearch.com/</id>
  
  <author>
    <name>joe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>超级签名详细实现</title>
    <link href="http://joewsearch.com/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/"/>
    <id>http://joewsearch.com/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-11-14T10:06:54.000Z</published>
    <updated>2019-11-16T02:55:25.898Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_06.jpg" alt="20191114_06"></p><p>Because you have never seen the miracle. - 《银翼杀手2049》</p><h2 id="超级签名是什么？"><a href="#超级签名是什么？" class="headerlink" title="超级签名是什么？"></a>超级签名是什么？</h2><p>所谓的超级签名，其实一句话就能说清楚：使用了苹果提供给开发者的Ad-Hoc分发通道，把安装设备当做开发设备进行分发。</p><p>优势：直接分发，安装即可运行，不需要用户做企业证书的信任操作，不会有证书吊销导致的风险<br>劣势：成本昂贵，单开发者账号的iPhone设备数量只有100个，</p><a id="more"></a><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p><img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_05.jpg?40" alt></p><ol><li>手机安装<code>.mobileconf</code>文件，将UDID发给服务器</li><li>服务器将收到的UDID注册到苹果开发者账号中，并更新描述文件</li><li>将更新后的描述文件来重签App</li><li>最后将重签的App上传至cdn，利用<code>itms-services</code>方式做分发下载</li></ol><h3 id="详细实现细节"><a href="#详细实现细节" class="headerlink" title="详细实现细节"></a>详细实现细节</h3><ol><li><p>准备好获取UDID的配置文件，也就是<code>.mobileconf</code>文件，文件内容大致如下:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadContent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">!–</span> 接收数据的接口地址 –&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>http://106.54.214.191:443/udid/receive<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>DeviceAttributes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>UDID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>IMEI<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>ICCID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>VERSION<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>PRODUCT<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadOrganization<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>www.qianniuniu.com<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadDisplayName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadUUID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>8C7AD0B8-3900-44DF-A52F-3C4F92921807<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.super.signature<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>该配置文件将帮助用户获取当前iOS设备的UDID号码。This temporary profile will be used to find and display your current device's UDID.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Profile Service<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用服务器https证书对配置文件签名</p></li></ol><p><img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_02.PNG" alt></p><ol start="3"><li><p>当用户点击上图的右上角安装后，就会调用<code>http://106.54.214.191:443/udid/receive</code>这个地址，服务器端就会收到UDID等信息</p></li><li><p>利用开源工具Spaceship，注册新的开发者设备到苹果开发者中心，并更新 Provisioning Profile，服务器端使用的是 ruby 脚本来完成这个功能：</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby -w</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"spaceship"</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"======Hello, Write Start======"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先登录</span></span><br><span class="line">Spaceship::Portal.login(<span class="string">"1711218908@qq.com"</span>, <span class="string">"密码"</span>)</span><br><span class="line"></span><br><span class="line">is_bundle = Spaceship.app.find(<span class="string">"com.super01.signature"</span>)</span><br><span class="line"><span class="keyword">if</span> !is_bundle</span><br><span class="line">Spaceship.app.create!(bundle_id: <span class="string">"com.super01.signature"</span>, name: <span class="string">'iosudid'</span>)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">#group权限</span></span><br><span class="line">app = Spaceship::Portal.app.find(<span class="string">"com.super01.signature"</span>)</span><br><span class="line"></span><br><span class="line">group = Spaceship::Portal.app_group.find(<span class="string">"group.com.super01.signature"</span>)</span><br><span class="line"><span class="keyword">if</span> !group</span><br><span class="line">    group = Spaceship::Portal.app_group.create!(group_id: <span class="string">"group.com.super01.signature"</span>,name: <span class="string">"Another group"</span>)</span><br><span class="line">end</span><br><span class="line">app = app.associate_groups([group])</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.network_extension.on)</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.access_wifi.on)</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.push_notification.on)</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.game_center.on)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增设备的UDID</span></span><br><span class="line">Spaceship::Portal.device.create!(name: <span class="string">"王方"</span>, udid: <span class="string">"7d7da5ba1d924d43b512c9ba9f976fdf47085209"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新设备</span></span><br><span class="line">allDevices = Spaceship.device.all</span><br><span class="line">device_profiles = Spaceship::Portal.provisioning_profile.ad_hoc.find_by_bundle_id(bundle_id: <span class="string">"com.super01.signature"</span>)</span><br><span class="line">device_profiles.each <span class="keyword">do</span> |profile|</span><br><span class="line">    profile.devices = allDevices</span><br><span class="line">    profile.update!</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载描述文件</span></span><br><span class="line">matching_profiles = Spaceship::Portal.provisioning_profile.ad_hoc.find_by_bundle_id(bundle_id: <span class="string">"com.super01.signature"</span>)</span><br><span class="line"><span class="keyword">if</span> matching_profiles.first</span><br><span class="line">File.write(<span class="string">"SuperSignatureAdHocProfile.mobileprovision"</span>, matching_profiles.first.download)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    cert = Spaceship::Portal.certificate.production.all.first</span><br><span class="line">    profile=Spaceship.provisioning_profile.ad_hoc.create!(bundle_id: <span class="string">"com.super01.signature"</span>, certificate: cert, name: <span class="string">"com.super01.signature adhoc"</span>)</span><br><span class="line">    File.write(<span class="string">"SuperSignatureAdHocProfile.mobileprovision"</span>, profile.download)</span><br><span class="line">end</span><br><span class="line">                        </span><br><span class="line">puts <span class="string">"====== Hello, Write End! ======"</span></span><br></pre></td></tr></table></figure></li><li><p>制作.cer证书，这一步和我们平时做iOS开发一样，我就不多说了</p></li><li><p>重点来了，ipa包的重签，这里使用的是 <a href="https://github.com/zhlynn/zsign" target="_blank" rel="noopener">zsign</a>，将步骤3中更新后的描述文件和步骤4中的证书放在zsign项目的同一级目录下，如下图：</p> <div style="width:100px;height:100px;background-color:red;"></div><p> <img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_01.png" alt></p><p> 使用命令如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zsign -k key.p12 -p 123 -m SuperSignatureAdHocProfile.prov -o output.ipa SASpecs.app</span><br></pre></td></tr></table></figure><p> 将重签好的ipa包上传至cdn服务器拿到下载链接，下一步开始制作分发文件。</p></li><li><p>分发文件（<code>manifest.plist</code>）需要准备两张图片的下载地址，文件内容如下：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://qnnapk-1251122539.cos.ap-shanghai.myqcloud.com/SASpecs.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://qnnapk-1251122539.cos.ap-shanghai.myqcloud.com/57.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://qnnapk-1251122539.cos.ap-shanghai.myqcloud.com/512.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.super.signature<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>platform-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.platform.iphoneos<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>SASpecs<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当用户下载这个分发文件后就会安装对应的ipa包，</p></li></ol><p><img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_04.PNG" alt></p><h2 id="至此，大功告成"><a href="#至此，大功告成" class="headerlink" title="至此，大功告成"></a>至此，大功告成</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_06.jpg&quot; alt=&quot;20191114_06&quot;&gt;&lt;/p&gt;
&lt;p&gt;Because you have never seen the miracle. - 《银翼杀手2049》&lt;/p&gt;
&lt;h2 id=&quot;超级签名是什么？&quot;&gt;&lt;a href=&quot;#超级签名是什么？&quot; class=&quot;headerlink&quot; title=&quot;超级签名是什么？&quot;&gt;&lt;/a&gt;超级签名是什么？&lt;/h2&gt;&lt;p&gt;所谓的超级签名，其实一句话就能说清楚：使用了苹果提供给开发者的Ad-Hoc分发通道，把安装设备当做开发设备进行分发。&lt;/p&gt;
&lt;p&gt;优势：直接分发，安装即可运行，不需要用户做企业证书的信任操作，不会有证书吊销导致的风险&lt;br&gt;劣势：成本昂贵，单开发者账号的iPhone设备数量只有100个，&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://joewsearch.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="超级签名" scheme="http://joewsearch.com/tags/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Next主题设置分类和标签</title>
    <link href="http://joewsearch.com/2019/11/13/next-theme-set-tags/"/>
    <id>http://joewsearch.com/2019/11/13/next-theme-set-tags/</id>
    <published>2019-11-13T10:06:25.000Z</published>
    <updated>2019-11-14T10:34:12.133Z</updated>
    
    <content type="html"><![CDATA[<p>最近将Hexo的主题换成了Next，发现配置 <code>themes/next/_config.yml</code>后，点击分类或标签显示Cannot GET /tags/%20/的问题，查官方文档好像也没有具体说明，只能自己去一步一步试，也记录一下解决问题的过程：</p><p>使用 <code>hexo new page &quot;tags&quot;</code> 和 <code>hexo new page &quot;categories&quot;</code> 在source目录下生成对应的本地文件，</p><p>修改 <code>tags/index.md</code> 文件</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-11-13 17:15:12</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>修改 <code>categories/index.md</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-11-13 17:40:15</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后每次写的新文章顶部写入categories/tags的value值, hexo即可自动帮你进行分类或标签管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 加密解密</span><br><span class="line">date: 2019-02-21 20:38:37</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: iOS</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>主题配置文件也别忘了打开以下注释，</p><p>注意：重点来了</p><blockquote><p><code>/||</code> 之间去掉空格<br><code>/||</code> 之间去掉空格<br><code>/||</code> 之间去掉空格</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /|| home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/|| tags</span><br><span class="line">  categories: /categories/|| th</span><br><span class="line">  archives: /archives/|| archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p><img src="/2019/11/13/next-theme-set-tags/20191112.png" alt="20191112"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近将Hexo的主题换成了Next，发现配置 &lt;code&gt;themes/next/_config.yml&lt;/code&gt;后，点击分类或标签显示Cannot GET /tags/%20/的问题，查官方文档好像也没有具体说明，只能自己去一步一步试，也记录一下解决问题的过程：&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;hexo new page &amp;quot;tags&amp;quot;&lt;/code&gt; 和 &lt;code&gt;hexo new page &amp;quot;categories&amp;quot;&lt;/code&gt; 在source目录下生成对应的本地文件，&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;tags/index.md&lt;/code&gt; 文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://joewsearch.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://joewsearch.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 界面开发详细介绍</title>
    <link href="http://joewsearch.com/2019/08/25/Flutter-UI-Develop/"/>
    <id>http://joewsearch.com/2019/08/25/Flutter-UI-Develop/</id>
    <published>2019-08-25T08:25:26.000Z</published>
    <updated>2019-11-15T09:21:26.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨平台开发方案的三个时代"><a href="#跨平台开发方案的三个时代" class="headerlink" title="跨平台开发方案的三个时代"></a>跨平台开发方案的三个时代</h2><p>Web容器时代:基于Web相关技术通过浏览器组件来实现界面及功能，典型的框架包括 Cordova(PhoneGap)、Ionic和微信小程序。<br>缺点：一个完整H5页面的展示要经历浏 览器控件的加载、解析和渲染三大过程，性能消耗要比原生开发增加N个数量级，内存占用多、网页加载速度慢、渲染慢、JavaScript 执行慢、交互体验差等</p><a id="more"></a><p>泛Web容器时代:采用类Web标准进行开发，但在运行时把绘制和渲染交由原生系统接管的技术，代表框 架有React Native、Weex和快应用，广义的还包括天猫的Virtual View等。<br>缺点：需要处理大量平台相关的逻辑外，随着系统版本变化和API的变化，我们还需要处理不同平台的原生 控件渲染能力差异，修复各类奇奇怪怪的Bug。</p><p>自绘引擎时代:自带渲染引擎，客户端仅提供一块画布即可获得从业务逻辑到功能呈现的多端高度一致的 渲染体验。Flutter，是为数不多的代表。</p><p>下面是跨平台开发方案的对比：</p><table><thead><tr><th>开发方案</th><th>Web容器</th><th>RN</th><th>Weex</th><th>Flutter</th></tr></thead><tbody><tr><td>类型</td><td>Web容器</td><td>泛Web容器</td><td>泛Web容器</td><td>自绘引擎</td></tr><tr><td>支持平台</td><td>Android/iOS/Web</td><td>Android/iOS</td><td>Android/iOS/Web</td><td>Android/iOS</td></tr><tr><td>开发语言</td><td>Javascript</td><td>Javascript(React)</td><td>Javascript(Vue)</td><td>Dart</td></tr><tr><td>技术栈</td><td>前端</td><td>偏前端</td><td>偏前端</td><td>偏客户端</td></tr><tr><td>动态化能力</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>渲染性能</td><td>差</td><td>一般</td><td>一般</td><td>好</td></tr><tr><td>滑动性能</td><td>差</td><td>一般</td><td>一般</td><td>好</td></tr><tr><td>页面级支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>区块级支持</td><td>不支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>开发效率</td><td>高</td><td>一般</td><td>一般</td><td>一般</td></tr><tr><td>维护成本</td><td>低</td><td>一般</td><td>高</td><td>低</td></tr><tr><td>系统升级视频难度</td><td>低</td><td>中</td><td>中</td><td>低</td></tr><tr><td>社区生态</td><td>活跃</td><td>活跃</td><td>不活跃</td><td>活跃</td></tr></tbody></table><h2 id="Flutter框架介绍"><a href="#Flutter框架介绍" class="headerlink" title="Flutter框架介绍"></a>Flutter框架介绍</h2><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_01.png" alt></p><p>Flutter架构采用分层设计，从下到上分为三层，依次为:Embedder、Engine、Framework。</p><p>Embedder是操作系统适配层，实现了渲染Surface设置，线程设置，以及平台插件等平台相关特性的适 配。从这里我们可以看到，Flutter平台相关特性并不多，这就使得从框架层面保持跨端一致性的成本相对 较低。</p><p>Engine层主要包含Skia、Dart和Text，实现了Flutter的渲染引擎、文字排版、事件处理和Dart运行时等功 能。Skia和Text为上层接口提供了调用底层渲染和排版的能力，Dart则为Flutter提供了运行时调用Dart和 渲染引擎的能力。而Engine层的作用，则是将它们组合起来，从它们生成的数据中实现视图渲染。</p><p>Framework层则是一个用Dart实现的UI SDK，包含了动画、图形绘制和手势识别等功能。为了在绘制控 件等固定样式的图形时提供更直观、更方便的接口，Flutter还基于这些基础能力，根据Material和 Cupertino两种视觉设计风格封装了一套UI组件库。我们在开发Flutter的时候，可以直接使用这些组件库。</p><h2 id="Flutter是怎么运转的"><a href="#Flutter是怎么运转的" class="headerlink" title="Flutter是怎么运转的?"></a>Flutter是怎么运转的?</h2><p>Flutter和其他跨平台方案的本质区别<br>与用于构建移动应用程序的其他大多数框架不同，Flutter是重写了一整套包括底层渲染逻辑和上层开发语言 的完整解决方案。这样不仅可以保证视图渲染在Android和iOS上的高度一致性(即高保真)，在代码执行 效率和渲染性能上也可以媲美原生App的体验(即高性能)。自己完成了组件渲染的闭环</p><p>React Native之类的框架，只是通过JavaScript虚拟机扩展调用系统组件，由Android和iOS系统进行组件 的渲染;</p><p>Flutter是怎么完成组件渲染的呢?这需要从图像显示的基本原理说起。</p><p>在计算机系统中，图像的显示需要CPU、GPU和显示器一起配合完成:CPU负责图像数据计算，GPU负责图 像数据渲染，而显示器则负责最终图像显示。</p><p>CPU把计算好的、需要显示的内容交给GPU，由GPU完成渲染后放入帧缓冲区，随后视频控制器根据垂直同 步信号(VSync)以每秒60次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。</p><p>操作系统在呈现图像时遵循了这种机制，而Flutter作为跨平台开发框架也采用了这种底层方案。</p><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_02.png" alt></p><p>可以看到，Flutter关注如何尽可能快地在两个硬件时钟的VSync信号之间计算并合成视图数据，然后通过 Skia交给GPU渲染:UI线程使用Dart来构建视图结构数据，这些数据会在GPU线程进行图层合成，随后交给 Skia引擎加工成GPU数据，而这些数据会通过OpenGL最终提供给GPU渲染。</p><h2 id="Skia-是什么"><a href="#Skia-是什么" class="headerlink" title="Skia 是什么?"></a>Skia 是什么?</h2><p>Skia是一款用C++开发的、性能彪悍的2D图像绘制引擎，其前身是一个向量绘图软件。2005年被Google公 司收购后，因为其出色的绘制表现被广泛应用在Chrome和Android等核心产品上。Skia在图形转换、文字渲 染、位图渲染方面都表现卓越，并提供了开发者友好的API。</p><p>目前，Skia已然是Android官方的图像渲染引擎了，因此Flutter Android SDK无需内嵌Skia引擎就可以获得天 然的Skia支持;而对于iOS平台来说，由于Skia是跨平台的，因此它作为Flutter iOS渲染引擎被嵌入到Flutter 的 iOS SDK中，替代了iOS闭源的Core Graphics/Core Animation/Core Text，这也正是Flutter iOS SDK打包 的App包体积比Android要大一些的原因。</p><p>底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性 了。也就是说，Skia保证了同一套代码调用在Android和iOS平台上的渲染效果是完全一致的。</p><h2 id="Dart-是什么？"><a href="#Dart-是什么？" class="headerlink" title="Dart 是什么？"></a>Dart 是什么？</h2><h3 id="Dart-历史"><a href="#Dart-历史" class="headerlink" title="Dart 历史"></a>Dart 历史</h3><p>2011年10月，在丹麦召开的GOTO大会上，Google发布了一种新的编程语言Dart。如同Kotlin和Swift的出 现，分别是为了解决Java和Objective-C在编写应用程序的一些实际问题一样，Dart的诞生正是要解决 JavaScript存在的、在语言本质上无法改进的缺陷。</p><p>JavaScript因为Node.js焕发了第二春，而Dart就没有那么好的运气了。由于缺少顶级项目的使用，Dart始终 不温不火。2015年，在听取了大量开发者的反馈后，Google决定将内置的Dart VM引擎从Chrome移除，这 对Dart的发展来说是重大挫折，替代JavaScript就更无从谈起了。</p><p>在Google内部孵化了移动开发框架Flutter，弯道超车进入了移动开发的领 域;而在Google未来的操作系统Fuchsia中，Dart更是被指定为官方的开发语言。</p><h3 id="Dart的特性"><a href="#Dart的特性" class="headerlink" title="Dart的特性"></a>Dart的特性</h3><p>核心特性<br>JIT与AOT：借助于先进的工具链和编译器，Dart是少数同时支持JIT(Just In Time，即时编译)和AOT(Ahead of Time，运行前编译)的语言之一。JIT在运行时即时编译，在开发周期中使用，可以动态下发和执行代码，开发测试效率高，但运行速度和 执行性能则会因为运行时即时编译受到影响。AOT即提前编译，可以生成被直接执行的二进制代码，运行速度快、执行性能表现好，但每次执行前都需 要提前编译，开发测试效率低。</p><p>内存分配与垃圾回收：</p><p>Dart VM的内存分配策略比较简单，创建对象时只需要在堆上移动指针，内存增长始终是线性的，省去了查 找可用内存的过程。<br>在Dart中，并发是通过Isolate实现的。Isolate是类似于线程但不共享内存，独立运行的worker。这样的机 制，就可以让Dart实现无锁的快速分配。</p><p>Dart的垃圾回收，则是采用了多生代算法。新生代在回收内存时采用“半空间”机制，触发垃圾回收时， Dart会将当前半空间中的“活跃”对象拷贝到备用空间，然后整体释放当前空间的所有内存。回收过程中， Dart只需要操作少量的“活跃”对象，没有引用的大量“死亡”对象则被忽略，这样的回收机制很适合 Flutter框架中大量Widget销毁重建的场景。</p><p>单线程模型：Dart中并没有线程，只有Isolate(隔离区)。Isolates之间不会共享内存，就像几个运行在不同进程 中的worker，通过事件循环(Event Looper)在事件队列(Event Queue)上传递消息通信。</p><p>无需单独的声明式布局语言，界面布局直接通过Dart编码来定义，使得Flutter并不需要类似JSX或XML的声明式布局语言。所有的布 局都使用同一种格式，也使得Flutter很容易提供高级工具使布局更简单。</p><h3 id="为什么是Dart"><a href="#为什么是Dart" class="headerlink" title="为什么是Dart?"></a>为什么是Dart?</h3><p>Google公司给出的原因很简单也很直接:Dart语言开发组就在隔壁，对于Flutter需要的一些语言新特 性，能够快速在语法层面落地实现;而如果选择了JavaScript，就必须经过各种委员会和浏览器提供商漫长的决议。</p><ul><li>同时支持即时编译JIT和事前编译AOT</li><li>Dart的学习成本并不高，很容易上手，Dart作为一门现代化语言，集百家之长，拥有其他优秀编程语言的诸多特性</li><li>利用独特的隔离区（Isolate）实现多线程。而且不共享内存，避免了抢占式调度和共享内存，可以在没有锁的情况下进行对象分配和垃圾回收，在性能方面表现相当不错。</li><li>创建的对象分配内存时，Dart 是在现有的堆上移动指针，保证内存的增长是程线性的，于是就省了查找可用内存的过程。</li><li>google的支持</li></ul><h2 id="Flutter-视图树结构"><a href="#Flutter-视图树结构" class="headerlink" title="Flutter 视图树结构"></a>Flutter 视图树结构</h2><p>Flutter 的视图结构的抽象分为三部分：Widget, Element, RenderObject</p><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_03.png" alt></p><p>Widget：Widget 里面存储了一个视图的配置信息，可以高效的创建（build）和销毁<br>Element：是分离 WidgetTree 和真正的渲染对象的中间层， WidgetTree 用来描述对应的Element 属性<br>RenderObject：来执行 Diff， Hit Test 布局、绘制</p><h2 id="视图树的操作"><a href="#视图树的操作" class="headerlink" title="视图树的操作"></a>视图树的操作</h2><h3 id="创建树"><a href="#创建树" class="headerlink" title="创建树"></a>创建树</h3><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_04.png" alt></p><p>创建树的过程：创建widget树 -&gt; 调用runApp(rootWidget)，将rootWidget传给rootElement,做为rootElement的子节点，生成Element树，由Element树生成Render树</p><p>Widget：存放渲染内容、视图布局信息，widget的属性最好都是immutable<br>Element：存放上下文，通过Element遍历视图树，Element同时持有Widget和RenderObject<br>RenderObject：根据Widget的布局属性进行layout，paint Widget传人的内容</p><h3 id="更新树"><a href="#更新树" class="headerlink" title="更新树"></a>更新树</h3><p>widget只是一个配置数据结构，创建是非常轻量的，加上flutter团队对widget的创建/销毁做了优化，不用担心整个widget树重新创建所带来的性能问题，但是renderobject就不一样了，renderobject涉及到layout、paint等复杂操作，是一个真正渲染的view，整个view 树重新创建开销就比较大，所以答案是否定的。</p><h3 id="树的更新规则"><a href="#树的更新规则" class="headerlink" title="树的更新规则"></a>树的更新规则</h3><ul><li>找到widget对应的element节点，设置element为dirty，触发drawframe, drawframe会调用element的<code>performRebuild()</code>进行树重建</li><li><code>widget.build() == null, deactive element.child</code> 删除子树，流程结束</li><li><code>element.child.widget == NULL, mount</code> 的新子树，流程结束</li><li><code>element.child.widget == widget.build()</code> 无需重建，否则进入流程5</li><li><code>Widget.canUpdate(element.child.widget, newWidget) == true</code> 更新child的slot，element.child.update(newWidget)(如果child还有子节点，则递归上面的流程进行子树更新),流程结束，否则转6</li><li><code>Widget.canUpdate(element.child.widget, newWidget) ！= true</code>（widget的classtype 或者 key 不相等），deactivew element.child，mount 新子树</li></ul><blockquote><p>注意：<br><code>element.child.widget == widget.build()</code>,不会触发子树的update，当触发update的时候，如果没有生效，要注意widget是否使用旧widget，没有new widget，导致update流程走到该widget就停止了<br>子树的深度变化，会引起子树重建，如果子树是一个复杂度很高的树，可以使用GlobalKey做为子树widget的key。GlobalKey具有缓存功能</p></blockquote><h3 id="如何触发树更新"><a href="#如何触发树更新" class="headerlink" title="如何触发树更新"></a>如何触发树更新</h3><p>全局更新：调用<code>runApp(rootWidget)</code>，一般flutter启动时调用后不再会调用<br>局部子树更新, 将该子树做StatefullWidget的一个子widget，并创建对应的State类实例，通过调用state.setState() 触发该子树的刷新</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_05.png" alt></p><ul><li><code>initState()</code>: state create之后被insert到tree时调用的</li><li><code>didUpdateWidget(newWidget)</code>:祖先节点rebuild widget时调用</li><li><code>deactivate()</code>:widget被remove的时候调用，一个widget从tree中remove掉，可以在dispose接口被调用前，重新instert到一个新tree中</li><li><code>didChangeDependencies()</code>:</li><li>初始化时，在<code>initState()</code>之后立刻调用</li><li>当依赖的InheritedWidget rebuild,会触发此接口被调用</li><li><code>build()</code>:</li><li>After calling [initState].</li><li>After calling [didUpdateWidget].</li><li>After receiving a call to [setState].</li><li>After a dependency of this [State] object changes (e.g., an[InheritedWidget] referenced by the previous [build] changes).</li><li>After calling [deactivate] and then reinserting the [State] object into the tree at another location.</li><li><code>dispose()</code>:Widget彻底销毁时调用</li><li><code>reassemble()</code>: hot reload调用</li></ul><blockquote><p>注意：<br>A页面push一个新的页面B,A页面的widget树中的所有state会依次调用<code>deactivate()</code>, <code>didUpdateWidget(newWidget)</code>、<code>build()</code>（这里怀疑是bug，A页面push一个新页面，理论上并没有将A页面进行remove操作），当然从功能上，没有看出来有什么异常<br>当ListView中的item滚动出可显示区域的时候，item会被从树中remove掉，此item子树中所有的state都会被dispose，state记录的数据都会销毁，item滚动回可显示区域时，会重新创建全新的state、element、renderobject<br>使用hot reload功能时，要特别注意state实例是没有重新创建的，如果该state中存在一下复杂的资源更新需要重新加载才能生效，那么需要在<code>reassemble()</code>添加处理，不然当你使用hot reload时候可能会出现一些意想不到的结果，例如，要将显示本地文件的内容到屏幕上，当你开发过程中，替换了文件中的内容，但是hot reload没有触发重新读取文件内容，页面显示还是原来的旧内容</p></blockquote><h2 id="数据流转"><a href="#数据流转" class="headerlink" title="数据流转"></a>数据流转</h2><h3 id="从上往下"><a href="#从上往下" class="headerlink" title="从上往下"></a>从上往下</h3><p>InheritedWidget用于子节点向祖先节点获取数据的机制</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrogColor</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> FrogColor(&#123;</span><br><span class="line">     Key key,</span><br><span class="line">     <span class="meta">@required</span> <span class="keyword">this</span>.color,</span><br><span class="line">     <span class="meta">@required</span> Widget child,</span><br><span class="line">   &#125;) : <span class="keyword">assert</span>(color != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">assert</span>(child != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> Color color;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> FrogColor of(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> context.inheritFromWidgetOfExactType(FrogColor);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   <span class="built_in">bool</span> updateShouldNotify(FrogColor old) =&gt; color != old.color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>child 及其以下的节点可以通过调用下面的接口读取color数据：FrogColor.of(context).color<br>context.inheritFromWidgetOfExactType(FrogColor) 其实是通过context/element往上遍历树，查找到第一个FrogColor的祖先节点，取该节点的widget对象</p><h3 id="从下往上"><a href="#从下往上" class="headerlink" title="从下往上"></a>从下往上</h3><p>通过发送通知的方式</p><ul><li>定义通知类，继承至Notification</li><li>父节点使用NotificationListener 进行监听捕获通知</li><li>子节点有数据变更调用下面接口进行数据上报</li><li><code>Notification(data).dispatch(context)</code></li></ul><p>流程如下：</p><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_06.png" alt></p><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><h3 id="Size-计算"><a href="#Size-计算" class="headerlink" title="Size 计算"></a>Size 计算</h3><p>parent传入约束条件，在dramframe的layout阶段，child根据自身的渲染内容返回size。但是，有个问题，在build()阶段获取不到size，很多时候需要提前知道部分widget size来进行布局，解决方案当widget 在对应renderobject的layout阶段之后，发送一个LayoutChangeNotification,参考SizeChangedLayoutNotifier class，但是SizeChangedLayoutNotifier没有上报init layout size，可以自己参考这个实现封装一个Notifier</p><h3 id="Offset-计算"><a href="#Offset-计算" class="headerlink" title="Offset 计算"></a>Offset 计算</h3><p>renderObject拿到计算好的size，再加上一些布局属性（align、paddig）等，计算child相对parent的offset；offset存放在每个child renderObject的BoxParentData中；当parent拥有mutil children时，BoxParentData还用来存children兄弟节点之间的遍历顺序</p><h3 id="Relayout-boundary"><a href="#Relayout-boundary" class="headerlink" title="Relayout boundary"></a>Relayout boundary</h3><p>renderObject在layout阶段做了Relayout boundary的优化，当子树进行relayout时，满足下面三种中的一种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parentUsesSize == false</span><br><span class="line">sizedByParent == true</span><br><span class="line">constraints.isTight</span><br></pre></td></tr></table></figure><p>那么该renderObject设置为Relayout boundary，也就是该renderObject的重新layout不触发parent的layout，一般情况下开发人员不需要关心Relayout boundary，除非是使用CustomMultiChildLayout。</p><h2 id="本文完"><a href="#本文完" class="headerlink" title="本文完"></a>本文完</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跨平台开发方案的三个时代&quot;&gt;&lt;a href=&quot;#跨平台开发方案的三个时代&quot; class=&quot;headerlink&quot; title=&quot;跨平台开发方案的三个时代&quot;&gt;&lt;/a&gt;跨平台开发方案的三个时代&lt;/h2&gt;&lt;p&gt;Web容器时代:基于Web相关技术通过浏览器组件来实现界面及功能，典型的框架包括 Cordova(PhoneGap)、Ionic和微信小程序。&lt;br&gt;缺点：一个完整H5页面的展示要经历浏 览器控件的加载、解析和渲染三大过程，性能消耗要比原生开发增加N个数量级，内存占用多、网页加载速度慢、渲染慢、JavaScript 执行慢、交互体验差等&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://joewsearch.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Flutter" scheme="http://joewsearch.com/tags/Flutter/"/>
    
  </entry>
  
</feed>
