<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bundle install 引发的报错问题</title>
    <url>/2019/12/04/bundle-install-error/</url>
    <content><![CDATA[<p>最近将 Mac 系统和 Xcode 更新到了最新的版本，Mac 系统为 macOS Catalina 10.15.1，Xcode 最新版本为11.2.1。当我 pod install 后报错如下：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  pod install</span></span><br><span class="line"><span class="regexp">Could not find proper version of cocoapods (1.7.5) in any of the sources</span></span><br><span class="line"><span class="regexp">Run `bundle install` to install missing gems.</span></span><br></pre></td></tr></table></figure><a id="more"></a>


<p>再执行 bundle install</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> ✘ wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  sudo bundle install</span></span><br><span class="line"><span class="regexp">Password:</span></span><br><span class="line"><span class="regexp">Don't run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this</span></span><br><span class="line"><span class="regexp">application for all non-root users on this machine.</span></span><br><span class="line"><span class="regexp">Warning: the running version of Bundler (1.17.2) is older than the version that created the lockfile (1.17.3). We suggest you upgrade to the latest version of Bundler by running `gem install bundler`.</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Fetching source index from https:/</span><span class="regexp">/gems.ruby-china.org/</span></span><br><span class="line"></span><br><span class="line">Retrying fetcher due to error (<span class="number">2</span>/<span class="number">4</span>): Bundler::HTTPError Could <span class="keyword">not</span> fetch specs from <span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.org/</span></span><br><span class="line">Retrying fetcher due to error (<span class="number">3</span>/<span class="number">4</span>): Bundler::HTTPError Could <span class="keyword">not</span> fetch specs from <span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.org/</span></span><br><span class="line">Retrying fetcher due to error (<span class="number">4</span>/<span class="number">4</span>): Bundler::HTTPError Could <span class="keyword">not</span> fetch specs from <span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.org/</span></span><br><span class="line">Could <span class="keyword">not</span> fetch specs from <span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.org/</span></span><br></pre></td></tr></table></figure>

<p>还是报错，难道我的 gem 源不对？去<a href="https://gems.ruby-china.com/" target="_blank" rel="noopener">官网</a>看了之后，发现已经由原来的 <code>https://gems.ruby-china.org/</code> 改成了 <code>https://gems.ruby-china.com/</code>，命令如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">✘ wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  gem sources --add https:/</span><span class="regexp">/gems.ruby-china.com/</span> --remove <span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.org/</span></span><br><span class="line">source <span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.com/</span> already present <span class="keyword">in</span> the cache</span><br><span class="line">source <span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.org/</span> <span class="keyword">not</span> present <span class="keyword">in</span> cache</span><br><span class="line"> wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  gem sources -l</span></span><br><span class="line"><span class="regexp">*** CURRENT SOURCES ***</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">https:/</span><span class="regexp">/gems.ruby-china.com/</span></span><br></pre></td></tr></table></figure>

<p>再执行 bundle install 还是报同样的错，忘了还需要设置 bundle config</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">bundle config mirror.<span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.org https:/</span><span class="regexp">/gems.ruby-china.com</span></span><br></pre></td></tr></table></figure>

<p>以上配置好了之后，执行 bundle install 会报另外一个错，</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  sudo bundle install</span></span><br><span class="line"><span class="regexp">Don't run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break</span></span><br><span class="line"><span class="regexp">this application for all non-root users on this machine.</span></span><br><span class="line"><span class="regexp">Warning: the running version of Bundler (1.17.2) is older than the version that created the lockfile (1.17.3). We suggest you upgrade to the latest version of Bundler by running `gem install bundler`.</span></span><br><span class="line"><span class="regexp">Fetching gem metadata from https:/</span><span class="regexp">/gems.ruby-china.com/</span>........</span><br><span class="line">Fetching CFPropertyList <span class="number">3.0</span>.<span class="number">1</span></span><br><span class="line">Installing CFPropertyList <span class="number">3.0</span>.<span class="number">1</span></span><br><span class="line">Using concurrent-ruby <span class="number">1.1</span>.<span class="number">5</span></span><br><span class="line">Using i18n <span class="number">0</span>.<span class="number">9.5</span></span><br><span class="line">Fetching minitest <span class="number">5.8</span>.<span class="number">5</span></span><br><span class="line">Installing minitest <span class="number">5.8</span>.<span class="number">5</span></span><br><span class="line">Using thread_safe <span class="number">0</span>.<span class="number">3.6</span></span><br><span class="line">Using tzinfo <span class="number">1.2</span>.<span class="number">5</span></span><br><span class="line">Using activesupport <span class="number">4.2</span>.<span class="number">11.1</span></span><br><span class="line">Using public_suffix <span class="number">2.0</span>.<span class="number">5</span></span><br><span class="line">Using addressable <span class="number">2.7</span>.<span class="number">0</span></span><br><span class="line">Using atomos <span class="number">0</span>.<span class="number">1.3</span></span><br><span class="line">Fetching babosa <span class="number">1.0</span>.<span class="number">3</span></span><br><span class="line">Installing babosa <span class="number">1.0</span>.<span class="number">3</span></span><br><span class="line">Using bundler <span class="number">1.17</span>.<span class="number">2</span></span><br><span class="line">Fetching claide <span class="number">1.0</span>.<span class="number">3</span></span><br><span class="line">Installing claide <span class="number">1.0</span>.<span class="number">3</span></span><br><span class="line">Using fuzzy_match <span class="number">2.0</span>.<span class="number">4</span></span><br><span class="line">Using nap <span class="number">1.1</span>.<span class="number">0</span></span><br><span class="line">Fetching cocoapods-core <span class="number">1.7</span>.<span class="number">5</span></span><br><span class="line">Installing cocoapods-core <span class="number">1.7</span>.<span class="number">5</span></span><br><span class="line">Using cocoapods-deintegrate <span class="number">1.0</span>.<span class="number">4</span></span><br><span class="line">Using cocoapods-downloader <span class="number">1.2</span>.<span class="number">2</span></span><br><span class="line">Using cocoapods-plugins <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">Using cocoapods-search <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">Using cocoapods-stats <span class="number">1.1</span>.<span class="number">0</span></span><br><span class="line">Using netrc <span class="number">0</span>.<span class="number">11.0</span></span><br><span class="line">Fetching cocoapods-trunk <span class="number">1.4</span>.<span class="number">0</span></span><br><span class="line">Installing cocoapods-trunk <span class="number">1.4</span>.<span class="number">0</span></span><br><span class="line">Using cocoapods-try <span class="number">1.1</span>.<span class="number">0</span></span><br><span class="line">Using colored2 <span class="number">3.1</span>.<span class="number">2</span></span><br><span class="line">Using escape <span class="number">0</span>.<span class="number">0</span>.<span class="number">4</span></span><br><span class="line">Using fourflusher <span class="number">2.3</span>.<span class="number">1</span></span><br><span class="line">Using gh_inspector <span class="number">1.1</span>.<span class="number">3</span></span><br><span class="line">Using molinillo <span class="number">0</span>.<span class="number">6.6</span></span><br><span class="line">Using ruby-macho <span class="number">1.4</span>.<span class="number">0</span></span><br><span class="line">Using nanaimo <span class="number">0</span>.<span class="number">2.6</span></span><br><span class="line">Fetching xcodeproj <span class="number">1.12</span>.<span class="number">0</span></span><br><span class="line">Installing xcodeproj <span class="number">1.12</span>.<span class="number">0</span></span><br><span class="line">Fetching cocoapods <span class="number">1.7</span>.<span class="number">5</span></span><br><span class="line">Installing cocoapods <span class="number">1.7</span>.<span class="number">5</span></span><br><span class="line">Using colored <span class="number">1.2</span></span><br><span class="line">Using highline <span class="number">1.7</span>.<span class="number">10</span></span><br><span class="line">Using commander-fastlane <span class="number">4.4</span>.<span class="number">6</span></span><br><span class="line">Using declarative <span class="number">0</span>.<span class="number">0</span>.<span class="number">10</span></span><br><span class="line">Using declarative-option <span class="number">0</span>.<span class="number">1.0</span></span><br><span class="line">Using digest-crc <span class="number">0</span>.<span class="number">4.1</span></span><br><span class="line">Using unf_ext <span class="number">0</span>.<span class="number">0</span>.<span class="number">7.6</span></span><br><span class="line">Using unf <span class="number">0</span>.<span class="number">1.4</span></span><br><span class="line">Using domain_name <span class="number">0</span>.<span class="number">5.20190701</span></span><br><span class="line">Using dotenv <span class="number">2.7</span>.<span class="number">5</span></span><br><span class="line">Using emoji_regex <span class="number">1.0</span>.<span class="number">1</span></span><br><span class="line">Fetching excon <span class="number">0</span>.<span class="number">67.0</span></span><br><span class="line">Installing excon <span class="number">0</span>.<span class="number">67.0</span></span><br><span class="line">Using multipart-post <span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line">Using faraday <span class="number">0</span>.<span class="number">15.4</span></span><br><span class="line">Using http-cookie <span class="number">1.0</span>.<span class="number">3</span></span><br><span class="line">Using faraday-cookie_jar <span class="number">0</span>.<span class="number">0</span>.<span class="number">6</span></span><br><span class="line">Using faraday_middleware <span class="number">0</span>.<span class="number">13.1</span></span><br><span class="line">Fetching fastimage <span class="number">2.1</span>.<span class="number">7</span></span><br><span class="line">Installing fastimage <span class="number">2.1</span>.<span class="number">7</span></span><br><span class="line">Using jwt <span class="number">2.1</span>.<span class="number">0</span></span><br><span class="line">Using memoist <span class="number">0</span>.<span class="number">16.0</span></span><br><span class="line">Using multi_json <span class="number">1.13</span>.<span class="number">1</span></span><br><span class="line">Using os <span class="number">1.0</span>.<span class="number">1</span></span><br><span class="line">Using signet <span class="number">0</span>.<span class="number">11.0</span></span><br><span class="line">Using googleauth <span class="number">0</span>.<span class="number">6.7</span></span><br><span class="line">Using httpclient <span class="number">2.8</span>.<span class="number">3</span></span><br><span class="line">Using mime-types-data <span class="number">3.2019</span>.0904</span><br><span class="line">Using mime-types <span class="number">3.3</span></span><br><span class="line">Using uber <span class="number">0</span>.<span class="number">1.0</span></span><br><span class="line">Using representable <span class="number">3.0</span>.<span class="number">4</span></span><br><span class="line">Using retriable <span class="number">3.1</span>.<span class="number">2</span></span><br><span class="line">Using google-api-client <span class="number">0</span>.<span class="number">23.9</span></span><br><span class="line">Using google-cloud-env <span class="number">1.2</span>.<span class="number">1</span></span><br><span class="line">Using google-cloud-core <span class="number">1.3</span>.<span class="number">1</span></span><br><span class="line">Using google-cloud-storage <span class="number">1.16</span>.<span class="number">0</span></span><br><span class="line">Fetching json <span class="number">2.2</span>.<span class="number">0</span></span><br><span class="line">Installing json <span class="number">2.2</span>.<span class="number">0</span> with native extensions</span><br><span class="line">Gem::Ext::<span class="symbol">BuildError:</span> <span class="symbol">ERROR:</span> Failed to build gem native extension.</span><br><span class="line"></span><br><span class="line">    current <span class="symbol">directory:</span> /Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/lib/ruby/gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/json-<span class="number">2.2</span>.<span class="number">0</span>/ext/json/ext/generator</span><br><span class="line">/Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/bin/ruby -I /Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/lib/ruby/<span class="number">2.6</span>.<span class="number">0</span> -r</span><br><span class="line">./siteconf20191204-<span class="number">12343</span>-<span class="number">1</span>w3gnyc.rb extconf.rb</span><br><span class="line">creating Makefile</span><br><span class="line"></span><br><span class="line">current <span class="symbol">directory:</span> /Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/lib/ruby/gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/json-<span class="number">2.2</span>.<span class="number">0</span>/ext/json/ext/generator</span><br><span class="line">make <span class="string">"DESTDIR="</span> clean</span><br><span class="line"></span><br><span class="line">current <span class="symbol">directory:</span> /Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/lib/ruby/gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/json-<span class="number">2.2</span>.<span class="number">0</span>/ext/json/ext/generator</span><br><span class="line">make <span class="string">"DESTDIR="</span></span><br><span class="line">compiling generator.c</span><br><span class="line">linking shared-object json/ext/generator.bundle</span><br><span class="line"><span class="symbol">ld:</span> <span class="symbol">warning:</span> directory <span class="keyword">not</span> found <span class="keyword">for</span> option <span class="string">'-L/usr/local/opt/libksba/lib'</span></span><br><span class="line"><span class="symbol">ld:</span> <span class="symbol">warning:</span> directory <span class="keyword">not</span> found <span class="keyword">for</span> option <span class="string">'-L/usr/local/opt/libksba/lib'</span></span><br><span class="line"><span class="symbol">ld:</span> <span class="symbol">warning:</span> directory <span class="keyword">not</span> found <span class="keyword">for</span> option <span class="string">'-L/usr/local/opt/libksba/lib'</span></span><br><span class="line"></span><br><span class="line">current <span class="symbol">directory:</span> /Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/lib/ruby/gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/json-<span class="number">2.2</span>.<span class="number">0</span>/ext/json/ext/generator</span><br><span class="line">make <span class="string">"DESTDIR="</span> install</span><br><span class="line"><span class="symbol">make:</span> /usr/local/opt/coreutils/bin/<span class="symbol">gmkdir:</span> No such file <span class="keyword">or</span> directory</span><br><span class="line"><span class="symbol">make:</span> *** [.sitearchdir.-.json.-.ext.time] Error <span class="number">1</span></span><br><span class="line"></span><br><span class="line">make install failed, exit code <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Gem files will remain installed <span class="keyword">in</span> /Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/lib/ruby/gems/<span class="number">2.6</span>.<span class="number">0</span>/gems/json-<span class="number">2.2</span>.<span class="number">0</span> <span class="keyword">for</span></span><br><span class="line">inspection.</span><br><span class="line">Results logged to</span><br><span class="line">/Users/wdy/.rvm/rubies/ruby-<span class="number">2.6</span>.<span class="number">0</span>/lib/ruby/gems/<span class="number">2.6</span>.<span class="number">0</span>/extensions/x86_64-darwin-<span class="number">18</span>/<span class="number">2.6</span>.<span class="number">0</span>/json-<span class="number">2.2</span>.<span class="number">0</span>/gem_make.out</span><br><span class="line"></span><br><span class="line">An error occurred <span class="keyword">while</span> installing json (<span class="number">2.2</span>.<span class="number">0</span>), <span class="keyword">and</span> Bundler cannot continue.</span><br><span class="line">Make sure that <span class="string">`gem install json -v '2.2.0' --source 'https://rubygems.org/'`</span> succeeds before bundling.</span><br><span class="line"></span><br><span class="line">In <span class="symbol">Gemfile:</span></span><br><span class="line">  fastlane-plugin-firim was resolved to <span class="number">0</span>.<span class="number">2.0</span>, which depends on</span><br><span class="line">    firim was resolved to <span class="number">0</span>.<span class="number">2.1</span>, which depends on</span><br><span class="line">      fastlane was resolved to <span class="number">2.131</span>.<span class="number">0</span>, which depends on</span><br><span class="line">        json</span><br></pre></td></tr></table></figure>

<p>好像是安装 <code>json 2.2.0</code> 的时候失败了，需要单独安装一下，那就按提示来，执行命令如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">  wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  sudo gem install json -v '2.2.0' --source 'https:/</span><span class="regexp">/rubygems.org/</span><span class="string">'</span></span><br><span class="line"><span class="string">Building native extensions. This could take a while...</span></span><br><span class="line"><span class="string">ERROR:  Error installing json:</span></span><br><span class="line"><span class="string">	ERROR: Failed to build gem native extension.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    current directory: /Users/wdy/.rvm/rubies/ruby-2.6.0/lib/ruby/gems/2.6.0/gems/json-2.2.0/ext/json/ext/generator</span></span><br><span class="line"><span class="string">/Users/wdy/.rvm/rubies/ruby-2.6.0/bin/ruby -I /Users/wdy/.rvm/rubies/ruby-2.6.0/lib/ruby/2.6.0 -r ./siteconf20191204-12556-140ytz4.rb extconf.rb</span></span><br><span class="line"><span class="string">creating Makefile</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">current directory: /Users/wdy/.rvm/rubies/ruby-2.6.0/lib/ruby/gems/2.6.0/gems/json-2.2.0/ext/json/ext/generator</span></span><br><span class="line"><span class="string">make "DESTDIR=" clean</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">current directory: /Users/wdy/.rvm/rubies/ruby-2.6.0/lib/ruby/gems/2.6.0/gems/json-2.2.0/ext/json/ext/generator</span></span><br><span class="line"><span class="string">make "DESTDIR="</span></span><br><span class="line"><span class="string">compiling generator.c</span></span><br><span class="line"><span class="string">linking shared-object json/ext/generator.bundle</span></span><br><span class="line"><span class="string">ld: warning: directory not found for option '</span>-L/usr/local/opt/libksba/lib<span class="string">'</span></span><br><span class="line"><span class="string">ld: warning: directory not found for option '</span>-L/usr/local/opt/libksba/lib<span class="string">'</span></span><br><span class="line"><span class="string">ld: warning: directory not found for option '</span>-L/usr/local/opt/libksba/lib<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">current directory: /Users/wdy/.rvm/rubies/ruby-2.6.0/lib/ruby/gems/2.6.0/gems/json-2.2.0/ext/json/ext/generator</span></span><br><span class="line"><span class="string">make "DESTDIR=" install</span></span><br><span class="line"><span class="string">make: /usr/local/opt/coreutils/bin/gmkdir: No such file or directory</span></span><br><span class="line"><span class="string">make: *** [.sitearchdir.-.json.-.ext.time] Error 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">make install failed, exit code 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gem files will remain installed in /Users/wdy/.rvm/rubies/ruby-2.6.0/lib/ruby/gems/2.6.0/gems/json-2.2.0 for inspection.</span></span><br><span class="line"><span class="string">Results logged to /Users/wdy/.rvm/rubies/ruby-2.6.0/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0/json-2.2.0/gem_make.out</span></span><br></pre></td></tr></table></figure>

<p>还是失败，在第23行给的错误提示 <code>/usr/local/opt/coreutils/bin/gmkdir</code> 这个目录找不到，网上查了之后，需要用 brew 安装 <code>coreutils</code>，执行命令：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">  wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  brew install coreutils</span></span><br><span class="line"><span class="regexp">Updating Homebrew...</span></span><br><span class="line"><span class="regexp">==&gt; Downloading https:/</span><span class="regexp">/homebrew.bintray.com/bottles</span><span class="regexp">/coreutils-8.31.catalina.bottle.1.tar.gz</span></span><br><span class="line"><span class="regexp">==&gt; Downloading from https:/</span><span class="regexp">/akamai.bintray.com/</span><span class="number">72</span>/<span class="number">7262</span>e4c76483ea796454db828c25955be1e6b2bc8e056ba1dd6e92bfe1118da5?<span class="number">_</span></span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Pouring coreutils-<span class="number">8.31</span>.catalina.bottle.<span class="number">1</span>.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Commands also provided by macOS have been installed with the prefix <span class="string">"g"</span>.</span><br><span class="line">If you need to use these commands with their normal names, you</span><br><span class="line">can add a <span class="string">"gnubin"</span> directory to your PATH from your bashrc <span class="symbol">like:</span></span><br><span class="line">  PATH=<span class="string">"/usr/local/opt/coreutils/libexec/gnubin:$PATH"</span></span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/coreutils/<span class="number">8.31</span>: <span class="number">476</span> files, <span class="number">9.2</span>MB</span><br><span class="line">==&gt; <span class="string">`brew cleanup`</span> has <span class="keyword">not</span> been run <span class="keyword">in</span> <span class="number">30</span> days, running now...</span><br></pre></td></tr></table></figure>

<p>成功之后再去安装那个 <code>json</code>，完整的命令如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> wdy  ~<span class="regexp">/Desktop/workspace</span><span class="regexp">/peoject  sudo gem install json -v '2.2.0' -n /usr</span><span class="regexp">/local/bin</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp">Password:</span></span><br><span class="line"><span class="regexp">Building native extensions. This could take a while...</span></span><br><span class="line"><span class="regexp">Successfully installed json-2.2.0</span></span><br><span class="line"><span class="regexp">Parsing documentation for json-2.2.0</span></span><br><span class="line"><span class="regexp">Installing ri documentation for json-2.2.0</span></span><br><span class="line"><span class="regexp">Done installing documentation for json after 1 seconds</span></span><br><span class="line"><span class="regexp">1 gem installed</span></span><br></pre></td></tr></table></figure>

<p>最后再去执行 <code>bundle install</code> 就没有报错了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>iOS签名机制</title>
    <url>/2019/11/18/encrypt-and-decrypt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直在研究iOS重签名的一些东西，也是对苹果超级签名机制的一次重新学习（之前只是了解），而在这之前先来过一遍加密解密数字签名等知识，下图是整个学习过程：</p><p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_01.png" alt></p><p>密码学主要解决四个核心问题：机密性（隐私性）、完整性、身份验证、不可抵赖性，经典的密码学算法有对称加密算法 、公开密钥算法等，而每一个密码学算法是为了解决哪些问题，还有哪些不足，下面来逐个分析一下</p><a id="more"></a>


<h2 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h2><p>什么是对称加算法呢？ 一般是通过一个算法和一个密钥（secret key）对明文（plaintext）进行处理，得到的不规则字符就是密文（ciphertext）</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_03.jpeg" alt></p>
<p>常见的对称密码算法有：DES、3DES、AES，这三种算法也称块密码算法，在加密或者解密的时候，每次对固定长度的数据块进行处理，每完成一次加密解密可能要结果多次运算，最终得到和明文长度一样的密文，数据块的长度就是分组的长度，也就说如果明文或者密文的长度除以分组长度不是整数倍，需要对明文进行填充，保证数据的长度是分组长度的整数块。由于明文长度远大于分组的长度，需要多次迭代运算才能得到密文或明文，于是就有了多种分组模式，比如常见的有ECB、CBC、CTR等模式，目前，ECB已被证明存在安全问题，一般不建议使用，最常用的是CBC模式。<a href="https://www.cnblogs.com/starwolf/p/3365834.html" target="_blank" rel="noopener">详见</a></p>
<p>AES(Advanced Encryption Standard)算法：AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。目前AES，已经逐步取代DES、3DES，成为首选的对称密码算法标准算法，</p>
<p><a href="https://blog.csdn.net/qq_28205153/article/details/55798628" target="_blank" rel="noopener">参考：AES加密算法的详细介绍与实现</a></p>
<p>加密算法能够解决机密性的问题，但是并不能解决数据的完整性（完整性的意思是原消息没有被篡改），比如攻击者虽然能够截获加密数据，但如果没有密钥，则无法得到原文，但是可以修改密文的部分数据，然后发送给接收者，接收者通过密钥发现能够解密，但是解密出来的值实际上不是原文，消息己经被修改了。</p>
<h2 id="单向散列函数"><a href="#单向散列函数" class="headerlink" title="单向散列函数"></a>单向散列函数</h2><p>单向散列函数也称为消息摘要函数, 哈希函数或者杂凑函数，其输出的散列值又称为消息摘要或者指纹，经典算法包括：MD4、MD5、SHA1、SHA256、SHA512等，特点：加密后密文的长度是定长的；计算速度快，高效；明文不一样，那么散列后的结果一定不一样；明文一样，那么加密后的密文一定一样；加密算法是公开的；单向性，不可以逆推反算。其中MD4、MD5已经被破解，SHA1目前已经不安全。</p>
<p>其实，很多情况下，传递的消息没有必要加密，只要确保消息是完整且没有被篡改即可，如天气API接口，接口返回的数据并没有加密，其原因：1.接口的数据并不重要；2.加密和解密过程很消耗性能。如果我们目标就是防止数据被篡改，接口数据通过Hash算法得到一个摘要值，摘要值和接口数据一起返回客户端就能满足要求，其处理逻辑如图：</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_04.jpeg" alt="Hash 算法确保消息完整"></p>
<p>上面的逻辑看上去没有问题，接收方校验摘要值是相同的，说明消息没有篡改，真的是这样吗？</p>
<p>实际上这种方案存在中间人攻击的，攻击过程：攻击者对消息进行拦截，同时修改接口消息和消息的摘要值然后发送给接收方，接收方收到消息后，对接口消息计算摘要值，然后与接收到的摘要值进行比较，发现是相同的，接收方认为消息是完整的。</p>
<p>可实际呢？消息虽然是完整的，但已经被篡改了，如图：</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_05.jpeg" alt></p>
<p>那么，问题来了，如何确保消息是正确的发送者发送的呢？</p>
<h2 id="问题一：如何确保消息是正确的发送者发送的呢？"><a href="#问题一：如何确保消息是正确的发送者发送的呢？" class="headerlink" title="问题一：如何确保消息是正确的发送者发送的呢？"></a>问题一：如何确保消息是正确的发送者发送的呢？</h2><h2 id="消息验证码算法"><a href="#消息验证码算法" class="headerlink" title="消息验证码算法"></a>消息验证码算法</h2><p>这里就要提到消息验证码算法了，在通信双方可以维护同一个密钥，只有拥有密钥的 通信双方才能生成和验证消息验证码，消息验证码算法需要一个密钥，这和对称加密算法是一样的，通信双方在消息传递之前需要获得同样的密钥。</p>
<p>消息验证码模型： MAC 值 ＝ mac（消息，密钥）</p>
<p>MAC算法有两种形式：CBC-MAC、HMAC</p>
<p>MAC值一般和原始消息一起传输，原始消息可以选择加密，也可以选择不加密，通信双方会以相同的方式生成MAC值，然后进行比较，工作原理如下图：</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_06.jpeg" alt></p>
<p>目前我们，已经解决了四大问题中的两个问题：消息的机密性和完整性，即对称加密算法可以保证消息的机密性，MAC算法可以保证消息的完整性，两者结合使用就可以保证消息同时具备机密性和完整性了。</p>
<p>但是，好像遗漏了一点，那就是密钥配送的问题，要想使用对称加密，那么分享信息的个体之间都需要分享这个密钥，试想一下，如果1000个人之间都使用同一个密钥进行密文传输，只要其中一个人密钥被盗窃了，那么整体加密的信息将都被破解了，那岂不是太可怕了。</p>
<h2 id="问题二：怎样避免对称加密算法的缺陷呢？"><a href="#问题二：怎样避免对称加密算法的缺陷呢？" class="headerlink" title="问题二：怎样避免对称加密算法的缺陷呢？"></a>问题二：怎样避免对称加密算法的缺陷呢？</h2><h2 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h2><p>非对称加密算法需要两个密钥：公开密钥（publickey:简称公钥）和私有密钥（privatekey:简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。因为加密和解密使用的是两个不同的密钥（加密是单向的），不是一个算法而是一组算法，如果公开密钥算法用于加密解密运算，习惯上称为非对称加密算法。</p>
<p>以下是对称加密算法和非对称加密算法的比较：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>功能</th>
<th>密钥</th>
<th>运算速度</th>
</tr>
</thead>
<tbody><tr>
<td>对称加密算法</td>
<td>主要用于加密和解密</td>
<td>密钥是一 串数字，加密者和解密者使用同样的 一个密钥</td>
<td>比较快</td>
</tr>
<tr>
<td>非对称加密算法</td>
<td>加密解密、密钥协商、数字签名</td>
<td>公开密钥算法的密钥是一对，分别是公钥（public key）和私钥（ private key），一般私钥由密钥对的生成方持有，避免泄露，而公钥任何人都可以持有，也不怕泄露。</td>
<td>运算非常缓慢</td>
</tr>
</tbody></table>
<p>加密解密过程如图：</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_07.jpeg" alt></p>
<h3 id="RSA-算法"><a href="#RSA-算法" class="headerlink" title="RSA 算法"></a>RSA 算法</h3><p>公开密钥算法最重要和最广泛使用的算法就是RSA算法，该算法是Ron Rivest 、 AdiShamir、Leonard Adleman三个人创建的，以三个人名字的首字母命名。RSA 算法是一个多用途的算法 ，可以进行加密解密、密钥协商、数字签名。</p>
<p>公钥和私钥由很多参数组成，一般以文件的形式提供。</p>
<h4 id="密钥文件生成过程"><a href="#密钥文件生成过程" class="headerlink" title="密钥文件生成过程"></a>密钥文件生成过程</h4><p>内部结构大概如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rsa_st</span>&#123;</span></span><br><span class="line">    BIGNUM *p; </span><br><span class="line">    BIGNUM *q; </span><br><span class="line">    BIGNUM *n; </span><br><span class="line">    BIGNUM *e; </span><br><span class="line">    BIGNUM *d; </span><br><span class="line">&#125; RSA;</span><br></pre></td></tr></table></figure>

<p>密钥对生成过程：</p>
<ul>
<li>选取两个很大的质数 p 和 q</li>
<li>求这两个数的乘积 n。</li>
<li>取一 个公开指数 e ，这个数的值小于(p - 1)(q - 1), e对应的值和(p - 1)(q - 1)的值互质。</li>
<li>e 和 n 组合起来就相当于公钥。 n 值的长度就相当于密钥对的长度。</li>
<li>e、 p、 q 能够计算出私钥 d，d 和 n 组合起来就是私钥。</li>
</ul>
<h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4><p>明文M进行多次幂运算，运算的次数就是公钥，计算出值后再进行模运算 (mod n)，最终得到的 C 就是密文。</p>
<pre><code>C = M ^ e (mod n)</code></pre><h4 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h4><p>对密文进行 d 次的幂运算，然后进行模运算，最终得到明文 M。</p>
<pre><code>M = C ^ d (mod n)</code></pre><h4 id="加密和解密互逆过程"><a href="#加密和解密互逆过程" class="headerlink" title="加密和解密互逆过程"></a>加密和解密互逆过程</h4><ul>
<li>C^d 的过程相 当于 (M^e)^d。</li>
<li>(M^e)^d 相当于 M^(e*d)。</li>
<li>(e*d) mod n 等于 1。</li>
<li>C^d (mod n）最终就能反解出 M。</li>
</ul>
<h4 id="RSA算法-为什么比较安全？"><a href="#RSA算法-为什么比较安全？" class="headerlink" title="RSA算法 为什么比较安全？"></a>RSA算法 为什么比较安全？</h4><p>幕运算的逆过程就是求对数问题，而模运算可以认为是离散问题，RSA算法就是离散对数模型，只要密钥长度足够长，离散对数很难破解。安全性和密钥对的长度有关，也就是和 n 这个值有关，它可以称为密钥长度，破解私钥有两个方法：</p>
<ul>
<li>公钥持有人有 e 和 n，而要计算出私钥d，需要知道 p 和 q，想通过一个巨大的数字 n 获取 p 和 q 是一个因式分解问题，暴力破解很难。</li>
<li>攻击者假如想通过密文和公钥破解私钥，就要求解决离散对数问题，更是难上加难。</li>
</ul>
<h3 id="密钥协商算法"><a href="#密钥协商算法" class="headerlink" title="密钥协商算法"></a>密钥协商算法</h3><p>密钥协商算法是用来解决密钥分配、存储、传输等问题，在网络通信中，为了加密解密数据，可以采用动态密钥，也叫作会话密钥，其特点：</p>
<ul>
<li>会话密钥的作用就是为了加密解密通信数据，也就是对称加密算法可以使用会话密钥进行加密解密。</li>
<li>在加密解密通信数据之前，客户端和服务器端需要协商出会话密钥，而会话密钥只有服务器端和特定的客户端才能知晓，不能泄露，这可以采用密钥协商算法解决。</li>
<li>会话密钥客户端和服务器端的内存中，不用存储，一旦客户端和服 务器端的连接关闭，该密钥就会消失，安全性就得到了很大的保障。</li>
</ul>
<h4 id="RSA-密钥协商算法工作原理"><a href="#RSA-密钥协商算法工作原理" class="headerlink" title="RSA 密钥协商算法工作原理"></a>RSA 密钥协商算法工作原理</h4><ul>
<li>客户端初始化连接服务器端，服务器发送 RSA 密钥对的公钥给客户端。 </li>
<li>客户端生成一个随机值，这个值必须是随机的，不能被攻击者猜出，这个值就是会话密钥。 </li>
<li>客户端使用服务器 RSA 密钥对的公钥加密会话密钥，并发送给服务器端，由于攻击者没有服务器的私钥，所以无法解密会话密钥。 </li>
<li>服务器端用它的私钥解密出会话密钥。</li>
<li>至此双方完成连接，接下来服务器端和客户端可以使用对称加密算法和会话密钥加密解密数据。</li>
</ul>
<p>由于会话密钥长度相对很小，数据量不大，比RSA加密也就快多了</p>
<h2 id="混合加密系统"><a href="#混合加密系统" class="headerlink" title="混合加密系统"></a>混合加密系统</h2><p>好了，我们已经知道 RSA 算法的基本知识和 RSA 密钥协商算法，现在来回答上面提出的问题三，怎样解决密钥配送问题呢？</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_08.jpeg" alt></p>
<p>上图所示，是将对称密码和公钥密码的优势相结合，解决了公钥密码速度慢，通过公钥密码解决了对称密码的密钥配送问题，也称混合加密系统。会话密钥为本次通信随机生成的临时密钥，作为对称密码的密钥，用于加密消息，提高速度。</p>
<p>加密步骤（发送消息）：</p>
<ol>
<li>首先，消息发送者要拥有消息接收者的公钥</li>
<li>生成会话密钥，作为对称密码的密钥，加密消息</li>
<li>用消息接收者的公钥，加密会话密钥</li>
<li>将前2步生成的加密结果，一并发给消息接收者</li>
</ol>
<p>解密步骤（接收消息）：</p>
<ol>
<li>消息接收者用自己的私钥解密出会话密钥</li>
<li>再用第1步解密出来的会话密钥，解密消息</li>
</ol>
<p>到这里，混合加密系统是否完美无缺了呢？还是回到文章开头，我们还有两个问题没有解决：身份验证、不可抵赖性。</p>
<p>A 、 B 、 C 三个人共享一个对称加密算法密钥， A 向 B 发送了一条消息，但是 A 可以抵赖说这条消息并不是他发送的，理由就是 C 也 有同样的密钥，这条力口密消息可能是 C 发送给 B 的，B 无法向第三方证明是 A 给他发送了消息。</p>
<p>公开密钥算法中，如果算法用于加密解密，也同样不能防止抵赖，RSA 的公钥是完全公开的，RSA私钥拥有者虽然能够解密，但是并不能确认是哪个客户端发送的消息，任何人都可以抵赖。</p>
<h2 id="问题三：如何确认对方的身份，防止抵赖呢？"><a href="#问题三：如何确认对方的身份，防止抵赖呢？" class="headerlink" title="问题三：如何确认对方的身份，防止抵赖呢？"></a>问题三：如何确认对方的身份，防止抵赖呢？</h2><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>在RSA算法中，私钥只有密钥对的生成者持有，如果不考虑密钥泄露的问题，私钥拥有者使用密钥（注意不是加密操作）签署一条消息，然后发送给任意的接收方，接收方只要 拥有私钥对应的公钥，就能成功反解签署消息，由于只有私钥持有者才能”签署”消息，不能抵赖说这条签署消息不是他发送的，这就是数字签名技术。</p>
<p>特点：</p>
<ol>
<li>防篡改：数据不会被修改。</li>
<li>防伪造：发送的消息不能够伪造。</li>
<li>防抵赖：消息签署者不能抵赖。</li>
</ol>
<p>前面两点，MAC 算法也具有，MAC 算法能保证传递的消息是经过验证的，但不能对消息发送者的身份进行验证，原因就在于消息发送方和接收方 拥有同样的密钥，所以双方可以抵赖。</p>
<p>前面讲到的RSA加密，那么RSA加密和数字签名有什么区别呢？数字签名，其实就是将公钥密码反过来使用</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">私钥</th>
<th align="center">公钥</th>
</tr>
</thead>
<tbody><tr>
<td align="center">公钥密码</td>
<td align="center">接受者解密是使用</td>
<td align="center">发送者加密时使用</td>
</tr>
<tr>
<td align="center">数字签名</td>
<td align="center">签名者生成签名时使用</td>
<td align="center">验证者验证签名时使用</td>
</tr>
<tr>
<td align="center">谁持有密钥</td>
<td align="center">个人持有</td>
<td align="center">任何人都可以持有</td>
</tr>
</tbody></table>
<p>实现过程：</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_09.jpeg" alt></p>
<p>签名生成:</p>
<p>发送者Alice对消息计算摘要值。<br>发送者Alice用单向散列函数生成散列值，用自己的私钥对散列值（摘要值）进行签名得到签名值。<br>发送者Alice将原始消息和签名值一同发给接收者。</p>
<p>签名验证:</p>
<p>接收者Bob接收到消息后，拆分出消息和消息签名值 A。<br>接收者Bob使用单向散列函数对消息生成散列值 B。<br>接收者Bob对摘要值 B 和签名值 A 进行比较，如果相同表示签名验证成功，否则就是验证失败。</p>
<blockquote>
<p>注意：数字签名技术的本质不是为了加密，所以和签名值一同传递的消息是不用加密的，当然也可以对消息加密后 再计算签名值。<br>公开密钥算法运行比较缓慢，数字签名算法建议对消息摘要值进行签名，因为摘要值的长度是固定的，运算的时候速度会比较快。</p>
</blockquote>
<p>目前来讲，我们四个大问题都已经解决了，加密解密技术也一步一步走向成熟，混合加密系统解决了公钥密码加密速度慢、对称密码的密钥配送问题，数字签名可以做到防篡改、防伪造和防抵赖，好像一切都OK了。但是我们好像忽略一个地方，那就是不管是混合加密解密技术、RSA加密算法，还是数字签名技术，都需要传递一个公钥给对方，如果在传递公钥过程中被人做手脚了呢，换句话说，服务器传递给客户端的公钥可能被攻击者替换，安全性也就荡然无存了，这就是中间人攻击，攻击过程如图：</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_10.jpg" alt></p>
<ul>
<li>客户端向服务器端发起连接请求，期望获取服务器的RSA公钥，攻击者劫持了这个请求。</li>
<li>攻击者自己生成一对 RSA 密钥对，然后将攻击者的 RSA 公钥发送给客户端。</li>
<li>攻击者然后再向服务器端发送请求，服务器生成 RSA 密钥对，将 RSA 公钥发送给客户端，实际上是发送给攻击者。</li>
<li>客户端通过攻击者的公钥加密密钥并发送给服务器，实际上是发送给攻击者。</li>
<li>攻击者用自己的 RSA 私钥解密了密钥 A，然后自己生成一个密钥 B ，用服务器的 RSA 公钥加密后发送给服务器端。</li>
<li>服务器端接收到请求后，用自己的 RSA 私钥解密出攻击者的密钥 B 。</li>
<li>客户端使用攻击者的密钥块 A，采用对称加密算法（AES）加密数据并发送给服务器端，实际上是发送给攻击者。</li>
<li>攻击者使用自己的密钥块A、采用 AES 算法解密出明文，客户端相当于泄露了隐私，攻击者使用密钥B ，采用 AES 算法加密明文后发送给服务器。</li>
<li>服务器使用密钥块 B，采用 AES 算法加密数据并发送给攻击者。</li>
<li>攻击者使用密钥块 B，采用 AES 算法解密出明文数据，此时客户端和服务器端的加密数据被成功破解。</li>
</ul>
<p>从上面可以看出，如果遭遇了中间人攻击，那么公钥将是伪造的，数字签名将失效。所以在验证签名之前，首先得先验证公钥的合法性</p>
<h2 id="问题四：如何验证公钥的合法性？"><a href="#问题四：如何验证公钥的合法性？" class="headerlink" title="问题四：如何验证公钥的合法性？"></a>问题四：如何验证公钥的合法性？</h2><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>证书，联想的是驾驶证、毕业证、英语四六级证等等，都是由权威机构认证的，密码学中的证书，全称叫公钥证书（Public-key Certificate，PKC），跟驾驶证类似里面有姓名、邮箱等个人信息，以及此人的公钥并由认证机构（Certificate Authority，CA）施加数字签名。</p>
<p>CA就是能够认定“公钥确实属于此人”并能够生成数字签名的个人或者组织，有国际性组织、政府设立的组织，有通过提供认证服务来盈利的企业，个人也可以成立认证机构。</p>
<p>认证过程如下：</p>
<p>CA 机构也拥有一个密钥对，比如 RSA 密钥对（与服 务器 的 RSA 密钥对没有任何关系），它用私钥对证书进行数字签名 ，将签名的证书发送给服务器。浏览器再连接服务器，服务器发送证书给浏览器，浏览器拥有 CA 机构的公钥（内嵌在浏览器 中），然后校验证书的签名，一旦校验成功，就代表这个证书是可信的 CA 机构签发的。</p>
<p>成功验证签名只能表示该证书是 CA 机构签发的，并不代表确认了身份，浏览器会继续校验，比如用户访问的网址是<a href="https://www.example.com" target="_blank" rel="noopener">https://www.example.com</a> 浏览器接收到服务器发送过来的证书，验证签名后，发现证书包含的域名也是 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 代表校验身份成功， 最后浏览器从证书中获取服务器的公钥，用来进行密钥协商。</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_11.jpeg" alt></p>
<ul>
<li>服务器实体（ end entity ），就是需要申请证书的实体， 比如 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 域名的拥有者可以申请一张证书，证书能够证明 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 域名所有者的身份。</li>
<li>浏览器充当证书校验方，方必须充分信任第三方 CA 机构，浏览器集成了各个 CA 机构的根证书。</li>
<li>CA 机构，CA 是证书签发机构，在审核服务器实体的有效身份后，给其签发证书，证书是用 CA 机构的密钥对（比如 RSA 密钥对）对服务器实体证书进行签名。</li>
<li>证书仓库，CA 机构签发的证书全部保存在仓库中，证书也可能过期或者被吊销，CA 机构吊销的证书称为证书吊销列表 CRL (Certificate Revocation List）。</li>
<li>OCSP ( Online Certificate Status Protocol）在线证书状态协议，是为了获取证书的吊销状态，需要部署专门的服务，这些服务由 CA 机构提供，通过数字签名技术保护。其校验过程：浏览器负责发送 OCSP 请求，然后等待 OCSP 响应，最终完成证书吊销状态的检查。</li>
</ul>
<h2 id="iOS签名机制"><a href="#iOS签名机制" class="headerlink" title="iOS签名机制"></a>iOS签名机制</h2><p>前面讲了这么多，主要是一些加密、解密、数字签名和证书等基础知识，开始进入重点了哈</p>
<p>iOS签名的作用</p>
<p>iOS签名机制的作用就是保证安装到用户手机上的APP都是经过Apple官方允许的，首要任务是保证设备及系统的安全性，只有被苹果设备认可的证书签名的代码才能够被执行，否则在安装或者运行时会因为无法通过内核的签名校验而失败。iOS的系统中内置了来自苹果的CA证书，系统自身的代码都是被苹果”签名“过的， 而用户从AppStore下载的App也都已被苹果官方进行签名。签名机制可以有效地防止来自外部的攻击。</p>
<p>限制app的行为，比如可读写的路径，允许访问的硬件，允许使用的服务等等，这些是沙盒(Sandbox)技术，通常所说的Entitlements(授权文件)，也就是指iOS沙盒的配置文件，这个文件中声明了app所需的权限，如果app中使用到了某项沙盒限制的功能，但没有声明对应的权限，可能运行到相关的代码时会直接Crash，当然提交审核的时候也是无法通过的。Entitlements也是强制签名的，如果Entitlements文件可以被任意修改，那么Sandbox也就失去了意义。对于越狱来说，如果无法绕过签名和Sandbox，再强大的提权漏洞也无计可施。</p>
<p>签名还给苹果带来了一个巨大的好处：App分发的绝对控制权。公开发行App的合法途径有且只有一种，就是上传到苹果官方的AppStore供用户下载。苹果会对App进行严格的审查并签名，App的功能及支付渠道也因此可以受苹果的严格管制，也带了巨大的经济效益。</p>
<p>不管是真机调试，还是发布APP，开发者都需要经过一系列复杂的步骤</p>
<ul>
<li>生成CertificateSigningRequest.certSigningRequest文件</li>
<li>获得ios_development.cer\ios_distribution.cer证书文件</li>
<li>注册device、添加App ID</li>
<li>获得*.mobileprovision文件</li>
</ul>
<p>当然，对于真机调试，现在的Xcode已经自动帮开发者做了以上操作，平时开发过程中也无需关心</p>
<p>iOS 设备安装 APP有四种：</p>
<ol>
<li>App Store 上下载安装</li>
<li>开发 App 时可以直接把开发中的应用安装进手机进行调试。</li>
<li>In-House 企业内部分发，可以直接安装企业证书签名后的 APP。</li>
<li>AD-Hoc 相当于企业分发的限制版，限制安装设备数量，较少用。</li>
</ol>
<p>先从简单的说起：App Store 上下载安装，其工作流程如下：<br>苹果官方生成一对公私钥，在 iOS 里内置一个公钥，私钥由苹果后台保存，我们传 App 上 AppStore 时，苹果后台用私钥对 APP 数据进行签名，iOS 系统下载这个 APP 后，用公钥验证这个签名，若签名正确，这个 APP 肯定是由苹果后台认证的，并且没有被修改过</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_12.jpeg" alt></p>
<p>苹果要对其它三种方式安装的 App 的控制就没那么简单了，方案是使用了双层签名</p>
<p><img src="/2019/11/18/encrypt-and-decrypt/encrypt-and-decrypt_02.png" alt></p>
<p>过程用文字来描述：</p>
<ol>
<li>在你的 Mac 开发机器生成一对公私钥，</li>
<li>苹果自己有固定的一对公私钥，跟上面 AppStore 例子一样，私钥在苹果后台，公钥在每个 iOS 设备上。</li>
<li>把Mac公钥传到苹果后台，用苹果后台里的私钥去签名Mac公钥。得到一份数据包含了Mac公钥以及其签名，把这份数据称为证书。</li>
<li>在苹果后台申请 AppID，配置好设备 ID 列表和 APP 可使用的权限，再加上第3步的证书，组成的数据用苹果私有签名，把数据和签名一起组成一个 Provisioning Profile 文件，下载到本地 Mac 开发机。</li>
<li>在开发时，编译完一个 APP 后，用本地的对这个 APP 进行签名，同时把第4步得到的 Provisioning Profile 文件打包进 APP 里，文件名为 embedded.mobileprovision，把 APP 安装到手机上。</li>
<li>在安装时，iOS 系统取得证书，通过系统内置的苹果公钥，去验证 embedded.mobileprovision 的数字签名是否正确，里面的证书签名也会再验一遍。</li>
<li>确保了 embedded.mobileprovision 里的数据都是苹果授权以后，就可以取出里面的数据，做各种验证，包括用Mac公钥验证APP签名，验证设备 ID 是否在 ID 列表上，AppID 是否对应得上，权限开关是否跟 APP 里的 Entitlements 对应等。</li>
</ol>
<p>总结一下这些概念：</p>
<ul>
<li>证书：内容是公钥或私钥，由其他机构对其签名组成的数据包。</li>
<li>Entitlements：包含了 App 权限开关列表。</li>
<li>CertificateSigningRequest：本地公钥。</li>
<li>p12：本地私钥，可以导入到其他电脑。</li>
<li>Provisioning Profile：包含了 证书 / Entitlements 等数据，并由苹果后台私钥签名的数据包。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>超级签名</tag>
      </tags>
  </entry>
  <entry>
    <title>超级签名详细实现</title>
    <url>/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_06.jpg" alt="20191114_06"></p>
<p>Because you have never seen the miracle. - 《银翼杀手2049》</p>
<h2 id="超级签名是什么？"><a href="#超级签名是什么？" class="headerlink" title="超级签名是什么？"></a>超级签名是什么？</h2><p>所谓的超级签名，其实一句话就能说清楚：使用了苹果提供给开发者的Ad-Hoc分发通道，把安装设备当做开发设备进行分发。</p>
<p>优势：直接分发，安装即可运行，不需要用户做企业证书的信任操作，不会有证书吊销导致的风险<br>劣势：成本昂贵，单开发者账号的iPhone设备数量只有100个，</p>
<a id="more"></a>

<h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p><img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_05.jpg?40" alt></p>
<ol>
<li>手机安装<code>.mobileconf</code>文件，将UDID发给服务器</li>
<li>服务器将收到的UDID注册到苹果开发者账号中，并更新描述文件</li>
<li>将更新后的描述文件来重签App</li>
<li>最后将重签的App上传至cdn，利用<code>itms-services</code>方式做分发下载</li>
</ol>
<h3 id="详细实现细节"><a href="#详细实现细节" class="headerlink" title="详细实现细节"></a>详细实现细节</h3><ol>
<li><p>准备好获取UDID的配置文件，也就是<code>.mobileconf</code>文件，文件内容大致如下:</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadContent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">!–</span> 接收数据的接口地址 –&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>http://106.54.214.191:443/udid/receive<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>DeviceAttributes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>UDID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>IMEI<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>ICCID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>VERSION<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>PRODUCT<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadOrganization<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>www.qianniuniu.com<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadDisplayName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadVersion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadUUID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>8C7AD0B8-3900-44DF-A52F-3C4F92921807<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadIdentifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.super.signature<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>该配置文件将帮助用户获取当前iOS设备的UDID号码。This temporary profile will be used to find and display your current device's UDID.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>PayloadType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Profile Service<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用服务器https证书对配置文件签名</p>
<p> <img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/super-sign_08.png" alt></p>
<p> 上图是服务器端生成的证书文件，这里使用的是Apache文件夹下面的</p>
<p> <img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/super-sign_07.png" alt></p>
<p> <code>mbaike.crt</code>：https服务器端使用证书文件。<br> <code>mbaike.key</code>：https服务器端使用证书对应的密钥。<br> <code>root_bundle.pem</code>：与SSL证书对应的证书链（中级证书）。<br> <code>unsigned.mobilecofig</code> 文件：IOS端生成的未签名的配置描述文件。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 再使用通过openssl命令生成签名后的signed.mobileconfig文件</span><br><span class="line">openssl smime -sign -in unsigned.mobileconfig -out signed.mobileconfig -signer mbaike.crt -inkey mbaike.key -certfile root_bundle.pem -outform der -nodetach</span><br><span class="line"></span><br><span class="line"># 也可以把key文件的密码写入到key文件中</span><br><span class="line">openssl rsa -in mbaike.key -out mbaikenopass.key</span><br><span class="line"></span><br><span class="line"># 第二步的命令就应该是</span><br><span class="line">openssl smime -sign -in unsigned.mobileconfig -out signed.mobileconfig -signer mbaike.crt -inkey mbaikenopass.key -certfile root_bundle.pem -outform der -nodetach</span><br></pre></td></tr></table></figure>
<p> 这样就完成了对 <code>mobileconfig</code> 的签名工作了</p>
<p> <img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_03.png" alt></p>
</li>
<li><p>上图是中点击 “获取UDID” ，就会跳到设置 -&gt; 通用 -&gt; 描述文件 去安装已经签名的描述文件</p>
<p> <img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_02.png" alt></p>
<p> 如图显示已签名，说明第二步对 <code>.mobilecofig</code> 的签名是OK的，安装成功后，返回下载页面并调用<code>http://106.54.214.191:443/udid/receive</code>这个地址，服务器端就会收到UDID等信息</p>
</li>
</ol>
<ol start="4">
<li><p>利用开源工具Spaceship，注册新的开发者设备到苹果开发者中心，并更新 Provisioning Profile，服务器端使用的是 ruby 脚本来完成这个功能：</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/ruby -w</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"spaceship"</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">"======Hello, Write Start======"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先登录</span></span><br><span class="line">Spaceship::Portal.login(<span class="string">"1711218908@qq.com"</span>, <span class="string">"密码"</span>)</span><br><span class="line"></span><br><span class="line">is_bundle = Spaceship.app.find(<span class="string">"com.super01.signature"</span>)</span><br><span class="line"><span class="keyword">if</span> !is_bundle</span><br><span class="line">Spaceship.app.create!(bundle_id: <span class="string">"com.super01.signature"</span>, name: <span class="string">'iosudid'</span>)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">#group权限</span></span><br><span class="line">app = Spaceship::Portal.app.find(<span class="string">"com.super01.signature"</span>)</span><br><span class="line"></span><br><span class="line">group = Spaceship::Portal.app_group.find(<span class="string">"group.com.super01.signature"</span>)</span><br><span class="line"><span class="keyword">if</span> !group</span><br><span class="line">    group = Spaceship::Portal.app_group.create!(group_id: <span class="string">"group.com.super01.signature"</span>,name: <span class="string">"Another group"</span>)</span><br><span class="line">end</span><br><span class="line">app = app.associate_groups([group])</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.network_extension.on)</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.access_wifi.on)</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.push_notification.on)</span><br><span class="line">app.update_service(Spaceship::Portal.app_service.game_center.on)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增设备的UDID</span></span><br><span class="line">Spaceship::Portal.device.create!(name: <span class="string">"王方"</span>, udid: <span class="string">"7d7da5ba1d924d43b512c9ba9f976fdf47085209"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新设备</span></span><br><span class="line">allDevices = Spaceship.device.all</span><br><span class="line">device_profiles = Spaceship::Portal.provisioning_profile.ad_hoc.find_by_bundle_id(bundle_id: <span class="string">"com.super01.signature"</span>)</span><br><span class="line">device_profiles.each <span class="keyword">do</span> |profile|</span><br><span class="line">    profile.devices = allDevices</span><br><span class="line">    profile.update!</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载描述文件</span></span><br><span class="line">matching_profiles = Spaceship::Portal.provisioning_profile.ad_hoc.find_by_bundle_id(bundle_id: <span class="string">"com.super01.signature"</span>)</span><br><span class="line"><span class="keyword">if</span> matching_profiles.first</span><br><span class="line">File.write(<span class="string">"SuperSignatureAdHocProfile.mobileprovision"</span>, matching_profiles.first.download)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    cert = Spaceship::Portal.certificate.production.all.first</span><br><span class="line">    profile=Spaceship.provisioning_profile.ad_hoc.create!(bundle_id: <span class="string">"com.super01.signature"</span>, certificate: cert, name: <span class="string">"com.super01.signature adhoc"</span>)</span><br><span class="line">    File.write(<span class="string">"SuperSignatureAdHocProfile.mobileprovision"</span>, profile.download)</span><br><span class="line">end</span><br><span class="line">                        </span><br><span class="line">puts <span class="string">"====== Hello, Write End! ======"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>制作.cer证书，这一步和我们平时做iOS开发一样，我就不多说了</p>
</li>
<li><p>重点来了，ipa包的重签，这里使用的是 <a href="https://github.com/zhlynn/zsign" target="_blank" rel="noopener">zsign</a>，将步骤3中更新后的描述文件和步骤4中的证书放在zsign项目的同一级目录下，如下图：</p>
<p> <img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_01.png" alt></p>
<p> 使用命令如下：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./zsign -k key.p12 -p 123 -m SuperSignatureAdHocProfile.prov -o output.ipa SASpecs.app</span><br></pre></td></tr></table></figure>

<p> 将重签好的ipa包上传至cdn服务器拿到下载链接，下一步开始制作分发文件。</p>
</li>
</ol>
<ol start="7">
<li><p>分发文件（<code>manifest.plist</code>）需要准备两张图片的下载地址，文件内容如下：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://qnnapk-1251122539.cos.ap-shanghai.myqcloud.com/SASpecs.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://qnnapk-1251122539.cos.ap-shanghai.myqcloud.com/57.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://qnnapk-1251122539.cos.ap-shanghai.myqcloud.com/512.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.super.signature<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>platform-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.platform.iphoneos<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>SASpecs<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当用户下载这个分发文件后就会安装对应的ipa包，</p>
</li>
</ol>
<p><img src="/2019/11/14/%E8%B6%85%E7%BA%A7%E7%AD%BE%E5%90%8D%E8%AF%A6%E7%BB%86%E5%AE%9E%E7%8E%B0/20191114_04.PNG" alt></p>
<h2 id="至此，大功告成"><a href="#至此，大功告成" class="headerlink" title="至此，大功告成"></a>至此，大功告成</h2>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>超级签名</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题设置分类和标签</title>
    <url>/2019/11/13/next-theme-set-tags/</url>
    <content><![CDATA[<p>最近将Hexo的主题换成了Next，发现配置 <code>themes/next/_config.yml</code>后，点击分类或标签显示Cannot GET /tags/%20/的问题，查官方文档好像也没有具体说明，只能自己去一步一步试，也记录一下解决问题的过程：</p>
<p>使用 <code>hexo new page &quot;tags&quot;</code> 和 <code>hexo new page &quot;categories&quot;</code> 在source目录下生成对应的本地文件，</p>
<p>修改 <code>tags/index.md</code> 文件</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-11-13 17:15:12</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>修改 <code>categories/index.md</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2019-11-13 17:40:15</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>然后每次写的新文章顶部写入categories/tags的value值, hexo即可自动帮你进行分类或标签管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 加密解密</span><br><span class="line">date: 2019-02-21 20:38:37</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: iOS</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<p>主题配置文件也别忘了打开以下注释，</p>
<p>注意：重点来了</p>
<blockquote>
<p><code>/||</code> 之间去掉空格<br><code>/||</code> 之间去掉空格<br><code>/||</code> 之间去掉空格</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /|| home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/|| tags</span><br><span class="line">  categories: /categories/|| th</span><br><span class="line">  archives: /archives/|| archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/13/next-theme-set-tags/20191112.png" alt="20191112"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 界面开发详细介绍</title>
    <url>/2019/08/25/Flutter-UI-Develop/</url>
    <content><![CDATA[<h2 id="跨平台开发方案的三个时代"><a href="#跨平台开发方案的三个时代" class="headerlink" title="跨平台开发方案的三个时代"></a>跨平台开发方案的三个时代</h2><p>Web容器时代:基于Web相关技术通过浏览器组件来实现界面及功能，典型的框架包括 Cordova(PhoneGap)、Ionic和微信小程序。<br>缺点：一个完整H5页面的展示要经历浏 览器控件的加载、解析和渲染三大过程，性能消耗要比原生开发增加N个数量级，内存占用多、网页加载速度慢、渲染慢、JavaScript 执行慢、交互体验差等</p><a id="more"></a>
<p>泛Web容器时代:采用类Web标准进行开发，但在运行时把绘制和渲染交由原生系统接管的技术，代表框 架有React Native、Weex和快应用，广义的还包括天猫的Virtual View等。<br>缺点：需要处理大量平台相关的逻辑外，随着系统版本变化和API的变化，我们还需要处理不同平台的原生 控件渲染能力差异，修复各类奇奇怪怪的Bug。</p>
<p>自绘引擎时代:自带渲染引擎，客户端仅提供一块画布即可获得从业务逻辑到功能呈现的多端高度一致的 渲染体验。Flutter，是为数不多的代表。</p>
<p>下面是跨平台开发方案的对比：</p>
<table>
<thead>
<tr>
<th>开发方案</th>
<th>Web容器</th>
<th>RN</th>
<th>Weex</th>
<th>Flutter</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>Web容器</td>
<td>泛Web容器</td>
<td>泛Web容器</td>
<td>自绘引擎</td>
</tr>
<tr>
<td>支持平台</td>
<td>Android/iOS/Web</td>
<td>Android/iOS</td>
<td>Android/iOS/Web</td>
<td>Android/iOS</td>
</tr>
<tr>
<td>开发语言</td>
<td>Javascript</td>
<td>Javascript(React)</td>
<td>Javascript(Vue)</td>
<td>Dart</td>
</tr>
<tr>
<td>技术栈</td>
<td>前端</td>
<td>偏前端</td>
<td>偏前端</td>
<td>偏客户端</td>
</tr>
<tr>
<td>动态化能力</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>渲染性能</td>
<td>差</td>
<td>一般</td>
<td>一般</td>
<td>好</td>
</tr>
<tr>
<td>滑动性能</td>
<td>差</td>
<td>一般</td>
<td>一般</td>
<td>好</td>
</tr>
<tr>
<td>页面级支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>区块级支持</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>开发效率</td>
<td>高</td>
<td>一般</td>
<td>一般</td>
<td>一般</td>
</tr>
<tr>
<td>维护成本</td>
<td>低</td>
<td>一般</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>系统升级视频难度</td>
<td>低</td>
<td>中</td>
<td>中</td>
<td>低</td>
</tr>
<tr>
<td>社区生态</td>
<td>活跃</td>
<td>活跃</td>
<td>不活跃</td>
<td>活跃</td>
</tr>
</tbody></table>
<h2 id="Flutter框架介绍"><a href="#Flutter框架介绍" class="headerlink" title="Flutter框架介绍"></a>Flutter框架介绍</h2><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_01.png" alt></p>
<p>Flutter架构采用分层设计，从下到上分为三层，依次为:Embedder、Engine、Framework。</p>
<p>Embedder是操作系统适配层，实现了渲染Surface设置，线程设置，以及平台插件等平台相关特性的适 配。从这里我们可以看到，Flutter平台相关特性并不多，这就使得从框架层面保持跨端一致性的成本相对 较低。</p>
<p>Engine层主要包含Skia、Dart和Text，实现了Flutter的渲染引擎、文字排版、事件处理和Dart运行时等功 能。Skia和Text为上层接口提供了调用底层渲染和排版的能力，Dart则为Flutter提供了运行时调用Dart和 渲染引擎的能力。而Engine层的作用，则是将它们组合起来，从它们生成的数据中实现视图渲染。</p>
<p>Framework层则是一个用Dart实现的UI SDK，包含了动画、图形绘制和手势识别等功能。为了在绘制控 件等固定样式的图形时提供更直观、更方便的接口，Flutter还基于这些基础能力，根据Material和 Cupertino两种视觉设计风格封装了一套UI组件库。我们在开发Flutter的时候，可以直接使用这些组件库。</p>
<h2 id="Flutter是怎么运转的"><a href="#Flutter是怎么运转的" class="headerlink" title="Flutter是怎么运转的?"></a>Flutter是怎么运转的?</h2><p>Flutter和其他跨平台方案的本质区别<br>与用于构建移动应用程序的其他大多数框架不同，Flutter是重写了一整套包括底层渲染逻辑和上层开发语言 的完整解决方案。这样不仅可以保证视图渲染在Android和iOS上的高度一致性(即高保真)，在代码执行 效率和渲染性能上也可以媲美原生App的体验(即高性能)。自己完成了组件渲染的闭环</p>
<p>React Native之类的框架，只是通过JavaScript虚拟机扩展调用系统组件，由Android和iOS系统进行组件 的渲染;</p>
<p>Flutter是怎么完成组件渲染的呢?这需要从图像显示的基本原理说起。</p>
<p>在计算机系统中，图像的显示需要CPU、GPU和显示器一起配合完成:CPU负责图像数据计算，GPU负责图 像数据渲染，而显示器则负责最终图像显示。</p>
<p>CPU把计算好的、需要显示的内容交给GPU，由GPU完成渲染后放入帧缓冲区，随后视频控制器根据垂直同 步信号(VSync)以每秒60次的速度，从帧缓冲区读取帧数据交由显示器完成图像显示。</p>
<p>操作系统在呈现图像时遵循了这种机制，而Flutter作为跨平台开发框架也采用了这种底层方案。</p>
<p><img src="/2019/08/25/Flutter-UI-Develop/20191115_02.png" alt></p>
<p>可以看到，Flutter关注如何尽可能快地在两个硬件时钟的VSync信号之间计算并合成视图数据，然后通过 Skia交给GPU渲染:UI线程使用Dart来构建视图结构数据，这些数据会在GPU线程进行图层合成，随后交给 Skia引擎加工成GPU数据，而这些数据会通过OpenGL最终提供给GPU渲染。</p>
<h2 id="Skia-是什么"><a href="#Skia-是什么" class="headerlink" title="Skia 是什么?"></a>Skia 是什么?</h2><p>Skia是一款用C++开发的、性能彪悍的2D图像绘制引擎，其前身是一个向量绘图软件。2005年被Google公 司收购后，因为其出色的绘制表现被广泛应用在Chrome和Android等核心产品上。Skia在图形转换、文字渲 染、位图渲染方面都表现卓越，并提供了开发者友好的API。</p>
<p>目前，Skia已然是Android官方的图像渲染引擎了，因此Flutter Android SDK无需内嵌Skia引擎就可以获得天 然的Skia支持;而对于iOS平台来说，由于Skia是跨平台的，因此它作为Flutter iOS渲染引擎被嵌入到Flutter 的 iOS SDK中，替代了iOS闭源的Core Graphics/Core Animation/Core Text，这也正是Flutter iOS SDK打包 的App包体积比Android要大一些的原因。</p>
<p>底层渲染能力统一了，上层开发接口和功能体验也就随即统一了，开发者再也不用操心平台相关的渲染特性 了。也就是说，Skia保证了同一套代码调用在Android和iOS平台上的渲染效果是完全一致的。</p>
<h2 id="Dart-是什么？"><a href="#Dart-是什么？" class="headerlink" title="Dart 是什么？"></a>Dart 是什么？</h2><h3 id="Dart-历史"><a href="#Dart-历史" class="headerlink" title="Dart 历史"></a>Dart 历史</h3><p>2011年10月，在丹麦召开的GOTO大会上，Google发布了一种新的编程语言Dart。如同Kotlin和Swift的出 现，分别是为了解决Java和Objective-C在编写应用程序的一些实际问题一样，Dart的诞生正是要解决 JavaScript存在的、在语言本质上无法改进的缺陷。</p>
<p>JavaScript因为Node.js焕发了第二春，而Dart就没有那么好的运气了。由于缺少顶级项目的使用，Dart始终 不温不火。2015年，在听取了大量开发者的反馈后，Google决定将内置的Dart VM引擎从Chrome移除，这 对Dart的发展来说是重大挫折，替代JavaScript就更无从谈起了。</p>
<p>在Google内部孵化了移动开发框架Flutter，弯道超车进入了移动开发的领 域;而在Google未来的操作系统Fuchsia中，Dart更是被指定为官方的开发语言。</p>
<h3 id="Dart的特性"><a href="#Dart的特性" class="headerlink" title="Dart的特性"></a>Dart的特性</h3><p>核心特性<br>JIT与AOT：借助于先进的工具链和编译器，Dart是少数同时支持JIT(Just In Time，即时编译)和AOT(Ahead of Time，运行前编译)的语言之一。JIT在运行时即时编译，在开发周期中使用，可以动态下发和执行代码，开发测试效率高，但运行速度和 执行性能则会因为运行时即时编译受到影响。AOT即提前编译，可以生成被直接执行的二进制代码，运行速度快、执行性能表现好，但每次执行前都需 要提前编译，开发测试效率低。</p>
<p>内存分配与垃圾回收：</p>
<p>Dart VM的内存分配策略比较简单，创建对象时只需要在堆上移动指针，内存增长始终是线性的，省去了查 找可用内存的过程。<br>在Dart中，并发是通过Isolate实现的。Isolate是类似于线程但不共享内存，独立运行的worker。这样的机 制，就可以让Dart实现无锁的快速分配。</p>
<p>Dart的垃圾回收，则是采用了多生代算法。新生代在回收内存时采用“半空间”机制，触发垃圾回收时， Dart会将当前半空间中的“活跃”对象拷贝到备用空间，然后整体释放当前空间的所有内存。回收过程中， Dart只需要操作少量的“活跃”对象，没有引用的大量“死亡”对象则被忽略，这样的回收机制很适合 Flutter框架中大量Widget销毁重建的场景。</p>
<p>单线程模型：Dart中并没有线程，只有Isolate(隔离区)。Isolates之间不会共享内存，就像几个运行在不同进程 中的worker，通过事件循环(Event Looper)在事件队列(Event Queue)上传递消息通信。</p>
<p>无需单独的声明式布局语言，界面布局直接通过Dart编码来定义，使得Flutter并不需要类似JSX或XML的声明式布局语言。所有的布 局都使用同一种格式，也使得Flutter很容易提供高级工具使布局更简单。</p>
<h3 id="为什么是Dart"><a href="#为什么是Dart" class="headerlink" title="为什么是Dart?"></a>为什么是Dart?</h3><p>Google公司给出的原因很简单也很直接:Dart语言开发组就在隔壁，对于Flutter需要的一些语言新特 性，能够快速在语法层面落地实现;而如果选择了JavaScript，就必须经过各种委员会和浏览器提供商漫长的决议。</p>
<ul>
<li>同时支持即时编译JIT和事前编译AOT</li>
<li>Dart的学习成本并不高，很容易上手，Dart作为一门现代化语言，集百家之长，拥有其他优秀编程语言的诸多特性</li>
<li>利用独特的隔离区（Isolate）实现多线程。而且不共享内存，避免了抢占式调度和共享内存，可以在没有锁的情况下进行对象分配和垃圾回收，在性能方面表现相当不错。</li>
<li>创建的对象分配内存时，Dart 是在现有的堆上移动指针，保证内存的增长是程线性的，于是就省了查找可用内存的过程。</li>
<li>google的支持</li>
</ul>
<h2 id="Flutter-视图树结构"><a href="#Flutter-视图树结构" class="headerlink" title="Flutter 视图树结构"></a>Flutter 视图树结构</h2><p>Flutter 的视图结构的抽象分为三部分：Widget, Element, RenderObject</p>
<p><img src="/2019/08/25/Flutter-UI-Develop/20191115_03.png" alt></p>
<p>Widget：Widget 里面存储了一个视图的配置信息，可以高效的创建（build）和销毁<br>Element：是分离 WidgetTree 和真正的渲染对象的中间层， WidgetTree 用来描述对应的Element 属性<br>RenderObject：来执行 Diff， Hit Test 布局、绘制</p>
<h2 id="视图树的操作"><a href="#视图树的操作" class="headerlink" title="视图树的操作"></a>视图树的操作</h2><h3 id="创建树"><a href="#创建树" class="headerlink" title="创建树"></a>创建树</h3><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_04.png" alt></p>
<p>创建树的过程：创建widget树 -&gt; 调用runApp(rootWidget)，将rootWidget传给rootElement,做为rootElement的子节点，生成Element树，由Element树生成Render树</p>
<p>Widget：存放渲染内容、视图布局信息，widget的属性最好都是immutable<br>Element：存放上下文，通过Element遍历视图树，Element同时持有Widget和RenderObject<br>RenderObject：根据Widget的布局属性进行layout，paint Widget传人的内容</p>
<h3 id="更新树"><a href="#更新树" class="headerlink" title="更新树"></a>更新树</h3><p>widget只是一个配置数据结构，创建是非常轻量的，加上flutter团队对widget的创建/销毁做了优化，不用担心整个widget树重新创建所带来的性能问题，但是renderobject就不一样了，renderobject涉及到layout、paint等复杂操作，是一个真正渲染的view，整个view 树重新创建开销就比较大，所以答案是否定的。</p>
<h3 id="树的更新规则"><a href="#树的更新规则" class="headerlink" title="树的更新规则"></a>树的更新规则</h3><ul>
<li>找到widget对应的element节点，设置element为dirty，触发drawframe, drawframe会调用element的<code>performRebuild()</code>进行树重建</li>
<li><code>widget.build() == null, deactive element.child</code> 删除子树，流程结束</li>
<li><code>element.child.widget == NULL, mount</code> 的新子树，流程结束</li>
<li><code>element.child.widget == widget.build()</code> 无需重建，否则进入流程5</li>
<li><code>Widget.canUpdate(element.child.widget, newWidget) == true</code> 更新child的slot，element.child.update(newWidget)(如果child还有子节点，则递归上面的流程进行子树更新),流程结束，否则转6</li>
<li><code>Widget.canUpdate(element.child.widget, newWidget) ！= true</code>（widget的classtype 或者 key 不相等），deactivew element.child，mount 新子树</li>
</ul>
<blockquote>
<p>注意：<br><code>element.child.widget == widget.build()</code>,不会触发子树的update，当触发update的时候，如果没有生效，要注意widget是否使用旧widget，没有new widget，导致update流程走到该widget就停止了<br>子树的深度变化，会引起子树重建，如果子树是一个复杂度很高的树，可以使用GlobalKey做为子树widget的key。GlobalKey具有缓存功能</p>
</blockquote>
<h3 id="如何触发树更新"><a href="#如何触发树更新" class="headerlink" title="如何触发树更新"></a>如何触发树更新</h3><p>全局更新：调用<code>runApp(rootWidget)</code>，一般flutter启动时调用后不再会调用<br>局部子树更新, 将该子树做StatefullWidget的一个子widget，并创建对应的State类实例，通过调用state.setState() 触发该子树的刷新</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2019/08/25/Flutter-UI-Develop/20191115_05.png" alt></p>
<ul>
<li><code>initState()</code>: state create之后被insert到tree时调用的</li>
<li><code>didUpdateWidget(newWidget)</code>:祖先节点rebuild widget时调用</li>
<li><code>deactivate()</code>:widget被remove的时候调用，一个widget从tree中remove掉，可以在dispose接口被调用前，重新instert到一个新tree中</li>
<li><code>didChangeDependencies()</code>:</li>
<li>初始化时，在<code>initState()</code>之后立刻调用</li>
<li>当依赖的InheritedWidget rebuild,会触发此接口被调用</li>
<li><code>build()</code>:</li>
<li>After calling [initState].</li>
<li>After calling [didUpdateWidget].</li>
<li>After receiving a call to [setState].</li>
<li>After a dependency of this [State] object changes (e.g., an[InheritedWidget] referenced by the previous [build] changes).</li>
<li>After calling [deactivate] and then reinserting the [State] object into the tree at another location.</li>
<li><code>dispose()</code>:Widget彻底销毁时调用</li>
<li><code>reassemble()</code>: hot reload调用</li>
</ul>
<blockquote>
<p>注意：<br>A页面push一个新的页面B,A页面的widget树中的所有state会依次调用<code>deactivate()</code>, <code>didUpdateWidget(newWidget)</code>、<code>build()</code>（这里怀疑是bug，A页面push一个新页面，理论上并没有将A页面进行remove操作），当然从功能上，没有看出来有什么异常<br>当ListView中的item滚动出可显示区域的时候，item会被从树中remove掉，此item子树中所有的state都会被dispose，state记录的数据都会销毁，item滚动回可显示区域时，会重新创建全新的state、element、renderobject<br>使用hot reload功能时，要特别注意state实例是没有重新创建的，如果该state中存在一下复杂的资源更新需要重新加载才能生效，那么需要在<code>reassemble()</code>添加处理，不然当你使用hot reload时候可能会出现一些意想不到的结果，例如，要将显示本地文件的内容到屏幕上，当你开发过程中，替换了文件中的内容，但是hot reload没有触发重新读取文件内容，页面显示还是原来的旧内容</p>
</blockquote>
<h2 id="数据流转"><a href="#数据流转" class="headerlink" title="数据流转"></a>数据流转</h2><h3 id="从上往下"><a href="#从上往下" class="headerlink" title="从上往下"></a>从上往下</h3><p>InheritedWidget用于子节点向祖先节点获取数据的机制</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrogColor</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> FrogColor(&#123;</span><br><span class="line">     Key key,</span><br><span class="line">     <span class="meta">@required</span> <span class="keyword">this</span>.color,</span><br><span class="line">     <span class="meta">@required</span> Widget child,</span><br><span class="line">   &#125;) : <span class="keyword">assert</span>(color != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">assert</span>(child != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> Color color;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> FrogColor of(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> context.inheritFromWidgetOfExactType(FrogColor);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@override</span></span><br><span class="line">   <span class="built_in">bool</span> updateShouldNotify(FrogColor old) =&gt; color != old.color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>child 及其以下的节点可以通过调用下面的接口读取color数据：FrogColor.of(context).color<br>context.inheritFromWidgetOfExactType(FrogColor) 其实是通过context/element往上遍历树，查找到第一个FrogColor的祖先节点，取该节点的widget对象</p>
<h3 id="从下往上"><a href="#从下往上" class="headerlink" title="从下往上"></a>从下往上</h3><p>通过发送通知的方式</p>
<ul>
<li>定义通知类，继承至Notification</li>
<li>父节点使用NotificationListener 进行监听捕获通知</li>
<li>子节点有数据变更调用下面接口进行数据上报</li>
<li><code>Notification(data).dispatch(context)</code></li>
</ul>
<p>流程如下：</p>
<p><img src="/2019/08/25/Flutter-UI-Develop/20191115_06.png" alt></p>
<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><h3 id="Size-计算"><a href="#Size-计算" class="headerlink" title="Size 计算"></a>Size 计算</h3><p>parent传入约束条件，在dramframe的layout阶段，child根据自身的渲染内容返回size。但是，有个问题，在build()阶段获取不到size，很多时候需要提前知道部分widget size来进行布局，解决方案当widget 在对应renderobject的layout阶段之后，发送一个LayoutChangeNotification,参考SizeChangedLayoutNotifier class，但是SizeChangedLayoutNotifier没有上报init layout size，可以自己参考这个实现封装一个Notifier</p>
<h3 id="Offset-计算"><a href="#Offset-计算" class="headerlink" title="Offset 计算"></a>Offset 计算</h3><p>renderObject拿到计算好的size，再加上一些布局属性（align、paddig）等，计算child相对parent的offset；offset存放在每个child renderObject的BoxParentData中；当parent拥有mutil children时，BoxParentData还用来存children兄弟节点之间的遍历顺序</p>
<h3 id="Relayout-boundary"><a href="#Relayout-boundary" class="headerlink" title="Relayout boundary"></a>Relayout boundary</h3><p>renderObject在layout阶段做了Relayout boundary的优化，当子树进行relayout时，满足下面三种中的一种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parentUsesSize == false</span><br><span class="line">sizedByParent == true</span><br><span class="line">constraints.isTight</span><br></pre></td></tr></table></figure>

<p>那么该renderObject设置为Relayout boundary，也就是该renderObject的重新layout不触发parent的layout，一般情况下开发人员不需要关心Relayout boundary，除非是使用CustomMultiChildLayout。</p>
<h2 id="本文完"><a href="#本文完" class="headerlink" title="本文完"></a>本文完</h2>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
</search>
